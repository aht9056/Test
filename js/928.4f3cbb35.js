"use strict";(self["webpackChunkmy_project"]=self["webpackChunkmy_project"]||[]).push([[928],{2928:function(e,r,t){t.d(r,{C:function(){return d},q:function(){return u}});var a=t(4599);const n="4b4fefeb718060277bbeed56e5d74d6e",s="11ab046b39a449d9e5835d1da414dedc",o="bookDataOutline",i=(0,a.w)("196RB4GOLF",n),c=(0,a.w)("196RB4GOLF",s).initAnalytics({region:"us"});async function d(e){if(!e.trim())return console.log("搜尋字串不可為空！"),null;try{const{results:r}=await i.search({requests:[{indexName:o,query:e}]});return console.log(r[0].hits),r}catch(r){return console.error("搜尋時發生錯誤:",r.message),null}}async function u(){try{const e=await c.getTopHits({index:o,limit:1e3});if(!e||!e.hits)return console.warn("沒有獲取到任何數據"),["T001","T002","T003","T004"];const r={};e.hits.forEach((({count:e,hit:t})=>{const a=t.match(/T\d{3}/);if(a){const t=a[0];r[t]=(r[t]||0)+e}}));const t=Object.entries(r).map((([e,r])=>({type:e,count:r}))).sort(((e,r)=>r.count-e.count)).map((e=>e.type));return t}catch(e){return console.error("獲取熱門搜尋類型時發生錯誤:",e.message),["T001","T002","T003","T004"]}}},4599:function(e,r,t){t.d(r,{w:function(){return Ve}});var a={};t.r(a),t.d(a,{abtestingClient:function(){return X},apiClientVersion:function(){return V}});var n={};t.r(n),t.d(n,{analyticsClient:function(){return te},apiClientVersion:function(){return Y}});var s={};t.r(s),t.d(s,{apiClientVersion:function(){return ae},insightsClient:function(){return ie}});var o={};t.r(o),t.d(o,{apiClientVersion:function(){return ce},personalizationClient:function(){return le}});var i={};t.r(i),t.d(i,{apiClientVersion:function(){return me},querySuggestionsClient:function(){return Pe}});var c={};t.r(c),t.d(c,{apiClientVersion:function(){return qe},searchClient:function(){return Ee}});var d={};t.r(d),t.d(d,{apiClientVersion:function(){return Ie},ingestionClient:function(){return ke},isOnDemandTrigger:function(){return Se},isScheduleTrigger:function(){return ve},isSubscriptionTrigger:function(){return xe}});var u={};t.r(u),t.d(u,{apiClientVersion:function(){return Ce},monitoringClient:function(){return Ae}});var h={};function l(){function e(e){return new Promise((r=>{let t=new XMLHttpRequest;t.open(e.method,e.url,!0),Object.keys(e.headers).forEach((r=>t.setRequestHeader(r,e.headers[r])));let a,n=(e,a)=>setTimeout((()=>{t.abort(),r({status:0,content:a,isTimedOut:!0})}),e),s=n(e.connectTimeout,"Connection timeout");t.onreadystatechange=()=>{t.readyState>t.OPENED&&void 0===a&&(clearTimeout(s),a=n(e.responseTimeout,"Socket timeout"))},t.onerror=()=>{0===t.status&&(clearTimeout(s),clearTimeout(a),r({content:t.responseText||"Network request failed",status:t.status,isTimedOut:!1}))},t.onload=()=>{clearTimeout(s),clearTimeout(a),r({content:t.responseText,status:t.status,isTimedOut:!1})},t.send(e.data)}))}return{send:e}}function m(e){return m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},m(e)}function p(e,r){if("object"!=m(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var a=t.call(e,r||"default");if("object"!=m(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(e)}function g(e){var r=p(e,"string");return"symbol"==m(r)?r:r+""}function w(e,r,t){return r=g(r),r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}t.r(h),t.d(h,{apiClientVersion:function(){return Ue},recommendClient:function(){return Ge}});t(4114);function P(e){let r;const t=`algolia-client-js-${e.key}`;function a(){return void 0===r&&(r=e.localStorage||window.localStorage),r}function n(){return JSON.parse(a().getItem(t)||"{}")}function s(e){a().setItem(t,JSON.stringify(e))}function o(){const r=e.timeToLive?1e3*e.timeToLive:null,t=n(),a=Object.fromEntries(Object.entries(t).filter((([,e])=>void 0!==e.timestamp)));if(s(a),!r)return;const o=Object.fromEntries(Object.entries(a).filter((([,e])=>{const t=(new Date).getTime(),a=e.timestamp+r<t;return!a})));s(o)}return{get(e,r,t={miss:()=>Promise.resolve()}){return Promise.resolve().then((()=>(o(),n()[JSON.stringify(e)]))).then((e=>Promise.all([e?e.value:r(),void 0!==e]))).then((([e,r])=>Promise.all([e,r||t.miss(e)]))).then((([e])=>e))},set(e,r){return Promise.resolve().then((()=>{const s=n();return s[JSON.stringify(e)]={timestamp:(new Date).getTime(),value:r},a().setItem(t,JSON.stringify(s)),r}))},delete(e){return Promise.resolve().then((()=>{const r=n();delete r[JSON.stringify(e)],a().setItem(t,JSON.stringify(r))}))},clear(){return Promise.resolve().then((()=>{a().removeItem(t)}))}}}function q(){return{get(e,r,t={miss:()=>Promise.resolve()}){const a=r();return a.then((e=>Promise.all([e,t.miss(e)]))).then((([e])=>e))},set(e,r){return Promise.resolve(r)},delete(e){return Promise.resolve()},clear(){return Promise.resolve()}}}function y(e){const r=[...e.caches],t=r.shift();return void 0===t?q():{get(e,a,n={miss:()=>Promise.resolve()}){return t.get(e,a,n).catch((()=>y({caches:r}).get(e,a,n)))},set(e,a){return t.set(e,a).catch((()=>y({caches:r}).set(e,a)))},delete(e){return t.delete(e).catch((()=>y({caches:r}).delete(e)))},clear(){return t.clear().catch((()=>y({caches:r}).clear()))}}}function f(e={serializable:!0}){let r={};return{get(t,a,n={miss:()=>Promise.resolve()}){const s=JSON.stringify(t);if(s in r)return Promise.resolve(e.serializable?JSON.parse(r[s]):r[s]);const o=a();return o.then((e=>n.miss(e))).then((()=>o))},set(t,a){return r[JSON.stringify(t)]=e.serializable?JSON.stringify(a):a,Promise.resolve(a)},delete(e){return delete r[JSON.stringify(e)],Promise.resolve()},clear(){return r={},Promise.resolve()}}}function E(e){const r={value:`Algolia for JavaScript (${e})`,add(e){const t=`; ${e.segment}${void 0!==e.version?` (${e.version})`:""}`;return-1===r.value.indexOf(t)&&(r.value=`${r.value}${t}`),r}};return r}function I(e,r,t="WithinHeaders"){const a={"x-algolia-api-key":r,"x-algolia-application-id":e};return{headers(){return"WithinHeaders"===t?a:{}},queryParameters(){return"WithinQueryParameters"===t?a:{}}}}function T({func:e,validate:r,aggregator:t,error:a,timeout:n=(()=>0)}){const s=o=>new Promise(((i,c)=>{e(o).then((async e=>(t&&await t(e),await r(e)?i(e):a&&await a.validate(e)?c(new Error(await a.message(e))):setTimeout((()=>{s(e).then(i).catch(c)}),await n())))).catch((e=>{c(e)}))}));return s()}function D({algoliaAgents:e,client:r,version:t}){const a=E(t).add({segment:r,version:t});return e.forEach((e=>a.add(e))),a}function S(){return{debug(e,r){return Promise.resolve()},info(e,r){return Promise.resolve()},error(e,r){return Promise.resolve()}}}var v=12e4;function x(e,r="up"){const t=Date.now();function a(){return"up"===r||Date.now()-t>v}function n(){return"timed out"===r&&Date.now()-t<=v}return{...e,status:r,lastUpdate:t,isUp:a,isTimedOut:n}}var b=class extends Error{constructor(e,r){super(e),w(this,"name","AlgoliaError"),r&&(this.name=r)}},k=class extends b{constructor(e,r,t){super(e,t),w(this,"stackTrace",void 0),this.stackTrace=r}},C=class extends k{constructor(e){super("Unreachable hosts - your application id may be incorrect. If the error persists, please reach out to the Algolia Support team: https://alg.li/support.",e,"RetryError")}},R=class extends k{constructor(e,r,t,a="ApiError"){super(e,t,a),w(this,"status",void 0),this.status=r}},N=class extends b{constructor(e,r){super(e,"DeserializationError"),w(this,"response",void 0),this.response=r}},A=class extends R{constructor(e,r,t,a){super(e,r,a,"DetailedApiError"),w(this,"error",void 0),this.error=t}};function U(e){const r=e;for(let t=e.length-1;t>0;t--){const a=Math.floor(Math.random()*(t+1)),n=e[t];r[t]=e[a],r[a]=n}return r}function O(e,r,t){const a=j(t);let n=`${e.protocol}://${e.url}${e.port?`:${e.port}`:""}/${"/"===r.charAt(0)?r.substring(1):r}`;return a.length&&(n+=`?${a}`),n}function j(e){return Object.keys(e).filter((r=>void 0!==e[r])).sort().map((r=>`${r}=${encodeURIComponent("[object Array]"===Object.prototype.toString.call(e[r])?e[r].join(","):e[r]).replace(/\+/g,"%20")}`)).join("&")}function G(e,r){if("GET"===e.method||void 0===e.data&&void 0===r.data)return;const t=Array.isArray(e.data)?e.data:{...e.data,...r.data};return JSON.stringify(t)}function K(e,r,t){const a={Accept:"application/json",...e,...r,...t},n={};return Object.keys(a).forEach((e=>{const r=a[e];n[e.toLowerCase()]=r})),n}function B(e){try{return JSON.parse(e.content)}catch(r){throw new N(r.message,e)}}function H({content:e,status:r},t){try{const a=JSON.parse(e);return"error"in a?new A(a.message,r,a.error,t):new R(a.message,r,t)}catch{}return new R(e,r,t)}function $({isTimedOut:e,status:r}){return!e&&0===~~r}function Q({isTimedOut:e,status:r}){return e||$({isTimedOut:e,status:r})||2!==~~(r/100)&&4!==~~(r/100)}function z({status:e}){return 2===~~(e/100)}function F(e){return e.map((e=>L(e)))}function L(e){const r=e.request.headers["x-algolia-api-key"]?{"x-algolia-api-key":"*****"}:{};return{...e,request:{...e.request,headers:{...e.request.headers,...r}}}}function W({hosts:e,hostsCache:r,baseHeaders:t,logger:a,baseQueryParameters:n,algoliaAgent:s,timeouts:o,requester:i,requestsCache:c,responsesCache:d}){async function u(e){const t=await Promise.all(e.map((e=>r.get(e,(()=>Promise.resolve(x(e))))))),a=t.filter((e=>e.isUp())),n=t.filter((e=>e.isTimedOut())),s=[...a,...n],o=s.length>0?s:e;return{hosts:o,getTimeout(e,r){const t=0===n.length&&0===e?1:n.length+3+e;return t*r}}}async function h(c,d,h=!0){const l=[],m=G(c,d),p=K(t,c.headers,d.headers),g="GET"===c.method?{...c.data,...d.data}:{},w={...n,...c.queryParameters,...g};if(s.value&&(w["x-algolia-agent"]=s.value),d&&d.queryParameters)for(const e of Object.keys(d.queryParameters))d.queryParameters[e]&&"[object Object]"!==Object.prototype.toString.call(d.queryParameters[e])?w[e]=d.queryParameters[e].toString():w[e]=d.queryParameters[e];let P=0;const q=async(e,t)=>{const n=e.pop();if(void 0===n)throw new C(F(l));const s={...o,...d.timeouts},u={data:m,headers:p,method:c.method,url:O(n,c.path,w),connectTimeout:t(P,s.connect),responseTimeout:t(P,h?s.read:s.write)},g=r=>{const t={request:u,response:r,host:n,triesLeft:e.length};return l.push(t),t},y=await i.send(u);if(Q(y)){const s=g(y);return y.isTimedOut&&P++,a.info("Retryable failure",L(s)),await r.set(n,x(n,y.isTimedOut?"timed out":"down")),q(e,t)}if(z(y))return B(y);throw g(y),H(y,l)},y=e.filter((e=>"readWrite"===e.accept||(h?"read"===e.accept:"write"===e.accept))),f=await u(y);return q([...f.hosts].reverse(),f.getTimeout)}function l(e,r={}){const a=e.useReadTransporter||"GET"===e.method;if(!a)return h(e,r,a);const s=()=>h(e,r),o=r.cacheable||e.cacheable;if(!0!==o)return s();const i={request:e,requestOptions:r,transporter:{queryParameters:n,headers:t}};return d.get(i,(()=>c.get(i,(()=>c.set(i,s()).then((e=>Promise.all([c.delete(i),e])),(e=>Promise.all([c.delete(i),Promise.reject(e)]))).then((([e,r])=>r))))),{miss:e=>d.set(i,e)})}return{hostsCache:r,requester:i,timeouts:o,logger:a,algoliaAgent:s,baseHeaders:t,baseQueryParameters:n,hosts:e,request:l,requestsCache:c,responsesCache:d}}var V="5.20.0",M=["de","us"];function J(e){const r=e?"analytics.{region}.algolia.com".replace("{region}",e):"analytics.algolia.com";return[{url:r,accept:"readWrite",protocol:"https"}]}function _({appId:e,apiKey:r,authMode:t,algoliaAgents:a,region:n,...s}){const o=I(e,r,t),i=W({hosts:J(n),...s,algoliaAgent:D({algoliaAgents:a,client:"Abtesting",version:V}),baseHeaders:{"content-type":"text/plain",...o.headers(),...s.baseHeaders},baseQueryParameters:{...o.queryParameters(),...s.baseQueryParameters}});return{transporter:i,appId:e,apiKey:r,clearCache(){return Promise.all([i.requestsCache.clear(),i.responsesCache.clear()]).then((()=>{}))},get _ua(){return i.algoliaAgent.value},addAlgoliaAgent(e,r){i.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){t&&"WithinHeaders"!==t?i.baseQueryParameters["x-algolia-api-key"]=e:i.baseHeaders["x-algolia-api-key"]=e},addABTests(e,r){if(!e)throw new Error("Parameter `addABTestsRequest` is required when calling `addABTests`.");if(!e.name)throw new Error("Parameter `addABTestsRequest.name` is required when calling `addABTests`.");if(!e.variants)throw new Error("Parameter `addABTestsRequest.variants` is required when calling `addABTests`.");if(!e.endAt)throw new Error("Parameter `addABTestsRequest.endAt` is required when calling `addABTests`.");const t="/2/abtests",a={},n={},s={method:"POST",path:t,queryParameters:n,headers:a,data:e};return i.request(s,r)},customDelete({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customDelete`.");const a="/{path}".replace("{path}",e),n={},s=r||{},o={method:"DELETE",path:a,queryParameters:s,headers:n};return i.request(o,t)},customGet({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customGet`.");const a="/{path}".replace("{path}",e),n={},s=r||{},o={method:"GET",path:a,queryParameters:s,headers:n};return i.request(o,t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPost`.");const n="/{path}".replace("{path}",e),s={},o=r||{},c={method:"POST",path:n,queryParameters:o,headers:s,data:t||{}};return i.request(c,a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPut`.");const n="/{path}".replace("{path}",e),s={},o=r||{},c={method:"PUT",path:n,queryParameters:o,headers:s,data:t||{}};return i.request(c,a)},deleteABTest({id:e},r){if(!e)throw new Error("Parameter `id` is required when calling `deleteABTest`.");const t="/2/abtests/{id}".replace("{id}",encodeURIComponent(e)),a={},n={},s={method:"DELETE",path:t,queryParameters:n,headers:a};return i.request(s,r)},estimateABTest(e,r){if(!e)throw new Error("Parameter `estimateABTestRequest` is required when calling `estimateABTest`.");if(!e.configuration)throw new Error("Parameter `estimateABTestRequest.configuration` is required when calling `estimateABTest`.");if(!e.variants)throw new Error("Parameter `estimateABTestRequest.variants` is required when calling `estimateABTest`.");const t="/2/abtests/estimate",a={},n={},s={method:"POST",path:t,queryParameters:n,headers:a,data:e};return i.request(s,r)},getABTest({id:e},r){if(!e)throw new Error("Parameter `id` is required when calling `getABTest`.");const t="/2/abtests/{id}".replace("{id}",encodeURIComponent(e)),a={},n={},s={method:"GET",path:t,queryParameters:n,headers:a};return i.request(s,r)},listABTests({offset:e,limit:r,indexPrefix:t,indexSuffix:a}={},n=void 0){const s="/2/abtests",o={},c={};void 0!==e&&(c["offset"]=e.toString()),void 0!==r&&(c["limit"]=r.toString()),void 0!==t&&(c["indexPrefix"]=t.toString()),void 0!==a&&(c["indexSuffix"]=a.toString());const d={method:"GET",path:s,queryParameters:c,headers:o};return i.request(d,n)},scheduleABTest(e,r){if(!e)throw new Error("Parameter `scheduleABTestsRequest` is required when calling `scheduleABTest`.");if(!e.name)throw new Error("Parameter `scheduleABTestsRequest.name` is required when calling `scheduleABTest`.");if(!e.variants)throw new Error("Parameter `scheduleABTestsRequest.variants` is required when calling `scheduleABTest`.");if(!e.scheduledAt)throw new Error("Parameter `scheduleABTestsRequest.scheduledAt` is required when calling `scheduleABTest`.");if(!e.endAt)throw new Error("Parameter `scheduleABTestsRequest.endAt` is required when calling `scheduleABTest`.");const t="/2/abtests/schedule",a={},n={},s={method:"POST",path:t,queryParameters:n,headers:a,data:e};return i.request(s,r)},stopABTest({id:e},r){if(!e)throw new Error("Parameter `id` is required when calling `stopABTest`.");const t="/2/abtests/{id}/stop".replace("{id}",encodeURIComponent(e)),a={},n={},s={method:"POST",path:t,queryParameters:n,headers:a};return i.request(s,r)}}}function X(e,r,t,a){if(!e||"string"!==typeof e)throw new Error("`appId` is missing.");if(!r||"string"!==typeof r)throw new Error("`apiKey` is missing.");if(t&&("string"!==typeof t||!M.includes(t)))throw new Error(`\`region\` must be one of the following: ${M.join(", ")}`);return _({appId:e,apiKey:r,region:t,timeouts:{connect:1e3,read:2e3,write:3e4},logger:S(),requester:l(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:f(),requestsCache:f({serializable:!1}),hostsCache:y({caches:[P({key:`${V}-${e}`}),f()]}),...a})}var Y="5.20.0",Z=["de","us"];function ee(e){const r=e?"analytics.{region}.algolia.com".replace("{region}",e):"analytics.algolia.com";return[{url:r,accept:"readWrite",protocol:"https"}]}function re({appId:e,apiKey:r,authMode:t,algoliaAgents:a,region:n,...s}){const o=I(e,r,t),i=W({hosts:ee(n),...s,algoliaAgent:D({algoliaAgents:a,client:"Analytics",version:Y}),baseHeaders:{"content-type":"text/plain",...o.headers(),...s.baseHeaders},baseQueryParameters:{...o.queryParameters(),...s.baseQueryParameters}});return{transporter:i,appId:e,apiKey:r,clearCache(){return Promise.all([i.requestsCache.clear(),i.responsesCache.clear()]).then((()=>{}))},get _ua(){return i.algoliaAgent.value},addAlgoliaAgent(e,r){i.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){t&&"WithinHeaders"!==t?i.baseQueryParameters["x-algolia-api-key"]=e:i.baseHeaders["x-algolia-api-key"]=e},customDelete({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customDelete`.");const a="/{path}".replace("{path}",e),n={},s=r||{},o={method:"DELETE",path:a,queryParameters:s,headers:n};return i.request(o,t)},customGet({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customGet`.");const a="/{path}".replace("{path}",e),n={},s=r||{},o={method:"GET",path:a,queryParameters:s,headers:n};return i.request(o,t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPost`.");const n="/{path}".replace("{path}",e),s={},o=r||{},c={method:"POST",path:n,queryParameters:o,headers:s,data:t||{}};return i.request(c,a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPut`.");const n="/{path}".replace("{path}",e),s={},o=r||{},c={method:"PUT",path:n,queryParameters:o,headers:s,data:t||{}};return i.request(c,a)},getAddToCartRate({index:e,startDate:r,endDate:t,tags:a},n){if(!e)throw new Error("Parameter `index` is required when calling `getAddToCartRate`.");const s="/2/conversions/addToCartRate",o={},c={};void 0!==e&&(c["index"]=e.toString()),void 0!==r&&(c["startDate"]=r.toString()),void 0!==t&&(c["endDate"]=t.toString()),void 0!==a&&(c["tags"]=a.toString());const d={method:"GET",path:s,queryParameters:c,headers:o};return i.request(d,n)},getAverageClickPosition({index:e,startDate:r,endDate:t,tags:a},n){if(!e)throw new Error("Parameter `index` is required when calling `getAverageClickPosition`.");const s="/2/clicks/averageClickPosition",o={},c={};void 0!==e&&(c["index"]=e.toString()),void 0!==r&&(c["startDate"]=r.toString()),void 0!==t&&(c["endDate"]=t.toString()),void 0!==a&&(c["tags"]=a.toString());const d={method:"GET",path:s,queryParameters:c,headers:o};return i.request(d,n)},getClickPositions({index:e,startDate:r,endDate:t,tags:a},n){if(!e)throw new Error("Parameter `index` is required when calling `getClickPositions`.");const s="/2/clicks/positions",o={},c={};void 0!==e&&(c["index"]=e.toString()),void 0!==r&&(c["startDate"]=r.toString()),void 0!==t&&(c["endDate"]=t.toString()),void 0!==a&&(c["tags"]=a.toString());const d={method:"GET",path:s,queryParameters:c,headers:o};return i.request(d,n)},getClickThroughRate({index:e,startDate:r,endDate:t,tags:a},n){if(!e)throw new Error("Parameter `index` is required when calling `getClickThroughRate`.");const s="/2/clicks/clickThroughRate",o={},c={};void 0!==e&&(c["index"]=e.toString()),void 0!==r&&(c["startDate"]=r.toString()),void 0!==t&&(c["endDate"]=t.toString()),void 0!==a&&(c["tags"]=a.toString());const d={method:"GET",path:s,queryParameters:c,headers:o};return i.request(d,n)},getConversionRate({index:e,startDate:r,endDate:t,tags:a},n){if(!e)throw new Error("Parameter `index` is required when calling `getConversionRate`.");const s="/2/conversions/conversionRate",o={},c={};void 0!==e&&(c["index"]=e.toString()),void 0!==r&&(c["startDate"]=r.toString()),void 0!==t&&(c["endDate"]=t.toString()),void 0!==a&&(c["tags"]=a.toString());const d={method:"GET",path:s,queryParameters:c,headers:o};return i.request(d,n)},getNoClickRate({index:e,startDate:r,endDate:t,tags:a},n){if(!e)throw new Error("Parameter `index` is required when calling `getNoClickRate`.");const s="/2/searches/noClickRate",o={},c={};void 0!==e&&(c["index"]=e.toString()),void 0!==r&&(c["startDate"]=r.toString()),void 0!==t&&(c["endDate"]=t.toString()),void 0!==a&&(c["tags"]=a.toString());const d={method:"GET",path:s,queryParameters:c,headers:o};return i.request(d,n)},getNoResultsRate({index:e,startDate:r,endDate:t,tags:a},n){if(!e)throw new Error("Parameter `index` is required when calling `getNoResultsRate`.");const s="/2/searches/noResultRate",o={},c={};void 0!==e&&(c["index"]=e.toString()),void 0!==r&&(c["startDate"]=r.toString()),void 0!==t&&(c["endDate"]=t.toString()),void 0!==a&&(c["tags"]=a.toString());const d={method:"GET",path:s,queryParameters:c,headers:o};return i.request(d,n)},getPurchaseRate({index:e,startDate:r,endDate:t,tags:a},n){if(!e)throw new Error("Parameter `index` is required when calling `getPurchaseRate`.");const s="/2/conversions/purchaseRate",o={},c={};void 0!==e&&(c["index"]=e.toString()),void 0!==r&&(c["startDate"]=r.toString()),void 0!==t&&(c["endDate"]=t.toString()),void 0!==a&&(c["tags"]=a.toString());const d={method:"GET",path:s,queryParameters:c,headers:o};return i.request(d,n)},getRevenue({index:e,startDate:r,endDate:t,tags:a},n){if(!e)throw new Error("Parameter `index` is required when calling `getRevenue`.");const s="/2/conversions/revenue",o={},c={};void 0!==e&&(c["index"]=e.toString()),void 0!==r&&(c["startDate"]=r.toString()),void 0!==t&&(c["endDate"]=t.toString()),void 0!==a&&(c["tags"]=a.toString());const d={method:"GET",path:s,queryParameters:c,headers:o};return i.request(d,n)},getSearchesCount({index:e,startDate:r,endDate:t,tags:a},n){if(!e)throw new Error("Parameter `index` is required when calling `getSearchesCount`.");const s="/2/searches/count",o={},c={};void 0!==e&&(c["index"]=e.toString()),void 0!==r&&(c["startDate"]=r.toString()),void 0!==t&&(c["endDate"]=t.toString()),void 0!==a&&(c["tags"]=a.toString());const d={method:"GET",path:s,queryParameters:c,headers:o};return i.request(d,n)},getSearchesNoClicks({index:e,startDate:r,endDate:t,limit:a,offset:n,tags:s},o){if(!e)throw new Error("Parameter `index` is required when calling `getSearchesNoClicks`.");const c="/2/searches/noClicks",d={},u={};void 0!==e&&(u["index"]=e.toString()),void 0!==r&&(u["startDate"]=r.toString()),void 0!==t&&(u["endDate"]=t.toString()),void 0!==a&&(u["limit"]=a.toString()),void 0!==n&&(u["offset"]=n.toString()),void 0!==s&&(u["tags"]=s.toString());const h={method:"GET",path:c,queryParameters:u,headers:d};return i.request(h,o)},getSearchesNoResults({index:e,startDate:r,endDate:t,limit:a,offset:n,tags:s},o){if(!e)throw new Error("Parameter `index` is required when calling `getSearchesNoResults`.");const c="/2/searches/noResults",d={},u={};void 0!==e&&(u["index"]=e.toString()),void 0!==r&&(u["startDate"]=r.toString()),void 0!==t&&(u["endDate"]=t.toString()),void 0!==a&&(u["limit"]=a.toString()),void 0!==n&&(u["offset"]=n.toString()),void 0!==s&&(u["tags"]=s.toString());const h={method:"GET",path:c,queryParameters:u,headers:d};return i.request(h,o)},getStatus({index:e},r){if(!e)throw new Error("Parameter `index` is required when calling `getStatus`.");const t="/2/status",a={},n={};void 0!==e&&(n["index"]=e.toString());const s={method:"GET",path:t,queryParameters:n,headers:a};return i.request(s,r)},getTopCountries({index:e,startDate:r,endDate:t,limit:a,offset:n,tags:s},o){if(!e)throw new Error("Parameter `index` is required when calling `getTopCountries`.");const c="/2/countries",d={},u={};void 0!==e&&(u["index"]=e.toString()),void 0!==r&&(u["startDate"]=r.toString()),void 0!==t&&(u["endDate"]=t.toString()),void 0!==a&&(u["limit"]=a.toString()),void 0!==n&&(u["offset"]=n.toString()),void 0!==s&&(u["tags"]=s.toString());const h={method:"GET",path:c,queryParameters:u,headers:d};return i.request(h,o)},getTopFilterAttributes({index:e,search:r,startDate:t,endDate:a,limit:n,offset:s,tags:o},c){if(!e)throw new Error("Parameter `index` is required when calling `getTopFilterAttributes`.");const d="/2/filters",u={},h={};void 0!==e&&(h["index"]=e.toString()),void 0!==r&&(h["search"]=r.toString()),void 0!==t&&(h["startDate"]=t.toString()),void 0!==a&&(h["endDate"]=a.toString()),void 0!==n&&(h["limit"]=n.toString()),void 0!==s&&(h["offset"]=s.toString()),void 0!==o&&(h["tags"]=o.toString());const l={method:"GET",path:d,queryParameters:h,headers:u};return i.request(l,c)},getTopFilterForAttribute({attribute:e,index:r,search:t,startDate:a,endDate:n,limit:s,offset:o,tags:c},d){if(!e)throw new Error("Parameter `attribute` is required when calling `getTopFilterForAttribute`.");if(!r)throw new Error("Parameter `index` is required when calling `getTopFilterForAttribute`.");const u="/2/filters/{attribute}".replace("{attribute}",encodeURIComponent(e)),h={},l={};void 0!==r&&(l["index"]=r.toString()),void 0!==t&&(l["search"]=t.toString()),void 0!==a&&(l["startDate"]=a.toString()),void 0!==n&&(l["endDate"]=n.toString()),void 0!==s&&(l["limit"]=s.toString()),void 0!==o&&(l["offset"]=o.toString()),void 0!==c&&(l["tags"]=c.toString());const m={method:"GET",path:u,queryParameters:l,headers:h};return i.request(m,d)},getTopFiltersNoResults({index:e,search:r,startDate:t,endDate:a,limit:n,offset:s,tags:o},c){if(!e)throw new Error("Parameter `index` is required when calling `getTopFiltersNoResults`.");const d="/2/filters/noResults",u={},h={};void 0!==e&&(h["index"]=e.toString()),void 0!==r&&(h["search"]=r.toString()),void 0!==t&&(h["startDate"]=t.toString()),void 0!==a&&(h["endDate"]=a.toString()),void 0!==n&&(h["limit"]=n.toString()),void 0!==s&&(h["offset"]=s.toString()),void 0!==o&&(h["tags"]=o.toString());const l={method:"GET",path:d,queryParameters:h,headers:u};return i.request(l,c)},getTopHits({index:e,search:r,clickAnalytics:t,revenueAnalytics:a,startDate:n,endDate:s,limit:o,offset:c,tags:d},u){if(!e)throw new Error("Parameter `index` is required when calling `getTopHits`.");const h="/2/hits",l={},m={};void 0!==e&&(m["index"]=e.toString()),void 0!==r&&(m["search"]=r.toString()),void 0!==t&&(m["clickAnalytics"]=t.toString()),void 0!==a&&(m["revenueAnalytics"]=a.toString()),void 0!==n&&(m["startDate"]=n.toString()),void 0!==s&&(m["endDate"]=s.toString()),void 0!==o&&(m["limit"]=o.toString()),void 0!==c&&(m["offset"]=c.toString()),void 0!==d&&(m["tags"]=d.toString());const p={method:"GET",path:h,queryParameters:m,headers:l};return i.request(p,u)},getTopSearches({index:e,clickAnalytics:r,revenueAnalytics:t,startDate:a,endDate:n,orderBy:s,direction:o,limit:c,offset:d,tags:u},h){if(!e)throw new Error("Parameter `index` is required when calling `getTopSearches`.");const l="/2/searches",m={},p={};void 0!==e&&(p["index"]=e.toString()),void 0!==r&&(p["clickAnalytics"]=r.toString()),void 0!==t&&(p["revenueAnalytics"]=t.toString()),void 0!==a&&(p["startDate"]=a.toString()),void 0!==n&&(p["endDate"]=n.toString()),void 0!==s&&(p["orderBy"]=s.toString()),void 0!==o&&(p["direction"]=o.toString()),void 0!==c&&(p["limit"]=c.toString()),void 0!==d&&(p["offset"]=d.toString()),void 0!==u&&(p["tags"]=u.toString());const g={method:"GET",path:l,queryParameters:p,headers:m};return i.request(g,h)},getUsersCount({index:e,startDate:r,endDate:t,tags:a},n){if(!e)throw new Error("Parameter `index` is required when calling `getUsersCount`.");const s="/2/users/count",o={},c={};void 0!==e&&(c["index"]=e.toString()),void 0!==r&&(c["startDate"]=r.toString()),void 0!==t&&(c["endDate"]=t.toString()),void 0!==a&&(c["tags"]=a.toString());const d={method:"GET",path:s,queryParameters:c,headers:o};return i.request(d,n)}}}function te(e,r,t,a){if(!e||"string"!==typeof e)throw new Error("`appId` is missing.");if(!r||"string"!==typeof r)throw new Error("`apiKey` is missing.");if(t&&("string"!==typeof t||!Z.includes(t)))throw new Error(`\`region\` must be one of the following: ${Z.join(", ")}`);return re({appId:e,apiKey:r,region:t,timeouts:{connect:1e3,read:2e3,write:3e4},logger:S(),requester:l(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:f(),requestsCache:f({serializable:!1}),hostsCache:y({caches:[P({key:`${Y}-${e}`}),f()]}),...a})}var ae="5.20.0",ne=["de","us"];function se(e){const r=e?"insights.{region}.algolia.io".replace("{region}",e):"insights.algolia.io";return[{url:r,accept:"readWrite",protocol:"https"}]}function oe({appId:e,apiKey:r,authMode:t,algoliaAgents:a,region:n,...s}){const o=I(e,r,t),i=W({hosts:se(n),...s,algoliaAgent:D({algoliaAgents:a,client:"Insights",version:ae}),baseHeaders:{"content-type":"text/plain",...o.headers(),...s.baseHeaders},baseQueryParameters:{...o.queryParameters(),...s.baseQueryParameters}});return{transporter:i,appId:e,apiKey:r,clearCache(){return Promise.all([i.requestsCache.clear(),i.responsesCache.clear()]).then((()=>{}))},get _ua(){return i.algoliaAgent.value},addAlgoliaAgent(e,r){i.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){t&&"WithinHeaders"!==t?i.baseQueryParameters["x-algolia-api-key"]=e:i.baseHeaders["x-algolia-api-key"]=e},customDelete({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customDelete`.");const a="/{path}".replace("{path}",e),n={},s=r||{},o={method:"DELETE",path:a,queryParameters:s,headers:n};return i.request(o,t)},customGet({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customGet`.");const a="/{path}".replace("{path}",e),n={},s=r||{},o={method:"GET",path:a,queryParameters:s,headers:n};return i.request(o,t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPost`.");const n="/{path}".replace("{path}",e),s={},o=r||{},c={method:"POST",path:n,queryParameters:o,headers:s,data:t||{}};return i.request(c,a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPut`.");const n="/{path}".replace("{path}",e),s={},o=r||{},c={method:"PUT",path:n,queryParameters:o,headers:s,data:t||{}};return i.request(c,a)},deleteUserToken({userToken:e},r){if(!e)throw new Error("Parameter `userToken` is required when calling `deleteUserToken`.");const t="/1/usertokens/{userToken}".replace("{userToken}",encodeURIComponent(e)),a={},n={},s={method:"DELETE",path:t,queryParameters:n,headers:a};return i.request(s,r)},pushEvents(e,r){if(!e)throw new Error("Parameter `insightsEvents` is required when calling `pushEvents`.");if(!e.events)throw new Error("Parameter `insightsEvents.events` is required when calling `pushEvents`.");const t="/1/events",a={},n={},s={method:"POST",path:t,queryParameters:n,headers:a,data:e};return i.request(s,r)}}}function ie(e,r,t,a){if(!e||"string"!==typeof e)throw new Error("`appId` is missing.");if(!r||"string"!==typeof r)throw new Error("`apiKey` is missing.");if(t&&("string"!==typeof t||!ne.includes(t)))throw new Error(`\`region\` must be one of the following: ${ne.join(", ")}`);return oe({appId:e,apiKey:r,region:t,timeouts:{connect:1e3,read:2e3,write:3e4},logger:S(),requester:l(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:f(),requestsCache:f({serializable:!1}),hostsCache:y({caches:[P({key:`${ae}-${e}`}),f()]}),...a})}var ce="5.20.0",de=["eu","us"];function ue(e){const r="personalization.{region}.algolia.com".replace("{region}",e);return[{url:r,accept:"readWrite",protocol:"https"}]}function he({appId:e,apiKey:r,authMode:t,algoliaAgents:a,region:n,...s}){const o=I(e,r,t),i=W({hosts:ue(n),...s,algoliaAgent:D({algoliaAgents:a,client:"Personalization",version:ce}),baseHeaders:{"content-type":"text/plain",...o.headers(),...s.baseHeaders},baseQueryParameters:{...o.queryParameters(),...s.baseQueryParameters}});return{transporter:i,appId:e,apiKey:r,clearCache(){return Promise.all([i.requestsCache.clear(),i.responsesCache.clear()]).then((()=>{}))},get _ua(){return i.algoliaAgent.value},addAlgoliaAgent(e,r){i.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){t&&"WithinHeaders"!==t?i.baseQueryParameters["x-algolia-api-key"]=e:i.baseHeaders["x-algolia-api-key"]=e},customDelete({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customDelete`.");const a="/{path}".replace("{path}",e),n={},s=r||{},o={method:"DELETE",path:a,queryParameters:s,headers:n};return i.request(o,t)},customGet({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customGet`.");const a="/{path}".replace("{path}",e),n={},s=r||{},o={method:"GET",path:a,queryParameters:s,headers:n};return i.request(o,t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPost`.");const n="/{path}".replace("{path}",e),s={},o=r||{},c={method:"POST",path:n,queryParameters:o,headers:s,data:t||{}};return i.request(c,a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPut`.");const n="/{path}".replace("{path}",e),s={},o=r||{},c={method:"PUT",path:n,queryParameters:o,headers:s,data:t||{}};return i.request(c,a)},deleteUserProfile({userToken:e},r){if(!e)throw new Error("Parameter `userToken` is required when calling `deleteUserProfile`.");const t="/1/profiles/{userToken}".replace("{userToken}",encodeURIComponent(e)),a={},n={},s={method:"DELETE",path:t,queryParameters:n,headers:a};return i.request(s,r)},getPersonalizationStrategy(e){const r="/1/strategies/personalization",t={},a={},n={method:"GET",path:r,queryParameters:a,headers:t};return i.request(n,e)},getUserTokenProfile({userToken:e},r){if(!e)throw new Error("Parameter `userToken` is required when calling `getUserTokenProfile`.");const t="/1/profiles/personalization/{userToken}".replace("{userToken}",encodeURIComponent(e)),a={},n={},s={method:"GET",path:t,queryParameters:n,headers:a};return i.request(s,r)},setPersonalizationStrategy(e,r){if(!e)throw new Error("Parameter `personalizationStrategyParams` is required when calling `setPersonalizationStrategy`.");if(!e.eventsScoring)throw new Error("Parameter `personalizationStrategyParams.eventsScoring` is required when calling `setPersonalizationStrategy`.");if(!e.facetsScoring)throw new Error("Parameter `personalizationStrategyParams.facetsScoring` is required when calling `setPersonalizationStrategy`.");if(!e.personalizationImpact)throw new Error("Parameter `personalizationStrategyParams.personalizationImpact` is required when calling `setPersonalizationStrategy`.");const t="/1/strategies/personalization",a={},n={},s={method:"POST",path:t,queryParameters:n,headers:a,data:e};return i.request(s,r)}}}function le(e,r,t,a){if(!e||"string"!==typeof e)throw new Error("`appId` is missing.");if(!r||"string"!==typeof r)throw new Error("`apiKey` is missing.");if(!t||t&&("string"!==typeof t||!de.includes(t)))throw new Error(`\`region\` is required and must be one of the following: ${de.join(", ")}`);return he({appId:e,apiKey:r,region:t,timeouts:{connect:1e3,read:2e3,write:3e4},logger:S(),requester:l(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:f(),requestsCache:f({serializable:!1}),hostsCache:y({caches:[P({key:`${ce}-${e}`}),f()]}),...a})}var me="5.20.0",pe=["eu","us"];function ge(e){const r="query-suggestions.{region}.algolia.com".replace("{region}",e);return[{url:r,accept:"readWrite",protocol:"https"}]}function we({appId:e,apiKey:r,authMode:t,algoliaAgents:a,region:n,...s}){const o=I(e,r,t),i=W({hosts:ge(n),...s,algoliaAgent:D({algoliaAgents:a,client:"QuerySuggestions",version:me}),baseHeaders:{"content-type":"text/plain",...o.headers(),...s.baseHeaders},baseQueryParameters:{...o.queryParameters(),...s.baseQueryParameters}});return{transporter:i,appId:e,apiKey:r,clearCache(){return Promise.all([i.requestsCache.clear(),i.responsesCache.clear()]).then((()=>{}))},get _ua(){return i.algoliaAgent.value},addAlgoliaAgent(e,r){i.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){t&&"WithinHeaders"!==t?i.baseQueryParameters["x-algolia-api-key"]=e:i.baseHeaders["x-algolia-api-key"]=e},createConfig(e,r){if(!e)throw new Error("Parameter `configurationWithIndex` is required when calling `createConfig`.");const t="/1/configs",a={},n={},s={method:"POST",path:t,queryParameters:n,headers:a,data:e};return i.request(s,r)},customDelete({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customDelete`.");const a="/{path}".replace("{path}",e),n={},s=r||{},o={method:"DELETE",path:a,queryParameters:s,headers:n};return i.request(o,t)},customGet({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customGet`.");const a="/{path}".replace("{path}",e),n={},s=r||{},o={method:"GET",path:a,queryParameters:s,headers:n};return i.request(o,t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPost`.");const n="/{path}".replace("{path}",e),s={},o=r||{},c={method:"POST",path:n,queryParameters:o,headers:s,data:t||{}};return i.request(c,a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPut`.");const n="/{path}".replace("{path}",e),s={},o=r||{},c={method:"PUT",path:n,queryParameters:o,headers:s,data:t||{}};return i.request(c,a)},deleteConfig({indexName:e},r){if(!e)throw new Error("Parameter `indexName` is required when calling `deleteConfig`.");const t="/1/configs/{indexName}".replace("{indexName}",encodeURIComponent(e)),a={},n={},s={method:"DELETE",path:t,queryParameters:n,headers:a};return i.request(s,r)},getAllConfigs(e){const r="/1/configs",t={},a={},n={method:"GET",path:r,queryParameters:a,headers:t};return i.request(n,e)},getConfig({indexName:e},r){if(!e)throw new Error("Parameter `indexName` is required when calling `getConfig`.");const t="/1/configs/{indexName}".replace("{indexName}",encodeURIComponent(e)),a={},n={},s={method:"GET",path:t,queryParameters:n,headers:a};return i.request(s,r)},getConfigStatus({indexName:e},r){if(!e)throw new Error("Parameter `indexName` is required when calling `getConfigStatus`.");const t="/1/configs/{indexName}/status".replace("{indexName}",encodeURIComponent(e)),a={},n={},s={method:"GET",path:t,queryParameters:n,headers:a};return i.request(s,r)},getLogFile({indexName:e},r){if(!e)throw new Error("Parameter `indexName` is required when calling `getLogFile`.");const t="/1/logs/{indexName}".replace("{indexName}",encodeURIComponent(e)),a={},n={},s={method:"GET",path:t,queryParameters:n,headers:a};return i.request(s,r)},updateConfig({indexName:e,configuration:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `updateConfig`.");if(!r)throw new Error("Parameter `configuration` is required when calling `updateConfig`.");if(!r.sourceIndices)throw new Error("Parameter `configuration.sourceIndices` is required when calling `updateConfig`.");const a="/1/configs/{indexName}".replace("{indexName}",encodeURIComponent(e)),n={},s={},o={method:"PUT",path:a,queryParameters:s,headers:n,data:r};return i.request(o,t)}}}function Pe(e,r,t,a){if(!e||"string"!==typeof e)throw new Error("`appId` is missing.");if(!r||"string"!==typeof r)throw new Error("`apiKey` is missing.");if(!t||t&&("string"!==typeof t||!pe.includes(t)))throw new Error(`\`region\` is required and must be one of the following: ${pe.join(", ")}`);return we({appId:e,apiKey:r,region:t,timeouts:{connect:1e3,read:2e3,write:3e4},logger:S(),requester:l(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:f(),requestsCache:f({serializable:!1}),hostsCache:y({caches:[P({key:`${me}-${e}`}),f()]}),...a})}var qe="5.20.0";function ye(e){return[{url:`${e}-dsn.algolia.net`,accept:"read",protocol:"https"},{url:`${e}.algolia.net`,accept:"write",protocol:"https"}].concat(U([{url:`${e}-1.algolianet.com`,accept:"readWrite",protocol:"https"},{url:`${e}-2.algolianet.com`,accept:"readWrite",protocol:"https"},{url:`${e}-3.algolianet.com`,accept:"readWrite",protocol:"https"}]))}function fe({appId:e,apiKey:r,authMode:t,algoliaAgents:a,...n}){const s=I(e,r,t),o=W({hosts:ye(e),...n,algoliaAgent:D({algoliaAgents:a,client:"Search",version:qe}),baseHeaders:{"content-type":"text/plain",...s.headers(),...n.baseHeaders},baseQueryParameters:{...s.queryParameters(),...n.baseQueryParameters}});return{transporter:o,appId:e,apiKey:r,clearCache(){return Promise.all([o.requestsCache.clear(),o.responsesCache.clear()]).then((()=>{}))},get _ua(){return o.algoliaAgent.value},addAlgoliaAgent(e,r){o.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){t&&"WithinHeaders"!==t?o.baseQueryParameters["x-algolia-api-key"]=e:o.baseHeaders["x-algolia-api-key"]=e},waitForTask({indexName:e,taskID:r,maxRetries:t=50,timeout:a=(e=>Math.min(200*e,5e3))},n){let s=0;return T({func:()=>this.getTask({indexName:e,taskID:r},n),validate:e=>"published"===e.status,aggregator:()=>s+=1,error:{validate:()=>s>=t,message:()=>`The maximum number of retries exceeded. (${s}/${t})`},timeout:()=>a(s)})},waitForAppTask({taskID:e,maxRetries:r=50,timeout:t=(e=>Math.min(200*e,5e3))},a){let n=0;return T({func:()=>this.getAppTask({taskID:e},a),validate:e=>"published"===e.status,aggregator:()=>n+=1,error:{validate:()=>n>=r,message:()=>`The maximum number of retries exceeded. (${n}/${r})`},timeout:()=>t(n)})},waitForApiKey({operation:e,key:r,apiKey:t,maxRetries:a=50,timeout:n=(e=>Math.min(200*e,5e3))},s){let o=0;const i={aggregator:()=>o+=1,error:{validate:()=>o>=a,message:()=>`The maximum number of retries exceeded. (${o}/${a})`},timeout:()=>n(o)};if("update"===e){if(!t)throw new Error("`apiKey` is required when waiting for an `update` operation.");return T({...i,func:()=>this.getApiKey({key:r},s),validate:e=>{for(const r of Object.keys(t)){const a=t[r],n=e[r];if(Array.isArray(a)&&Array.isArray(n)){if(a.length!==n.length||a.some(((e,r)=>e!==n[r])))return!1}else if(a!==n)return!1}return!0}})}return T({...i,func:()=>this.getApiKey({key:r},s).catch((e=>{if(404!==e.status)throw e})),validate:r=>"add"===e?void 0!==r:void 0===r})},browseObjects({indexName:e,browseParams:r,...t},a){return T({func:t=>this.browse({indexName:e,browseParams:{cursor:t?t.cursor:void 0,hitsPerPage:1e3,...r}},a),validate:e=>void 0===e.cursor,...t})},browseRules({indexName:e,searchRulesParams:r,...t},a){const n={hitsPerPage:1e3,...r};return T({func:r=>this.searchRules({indexName:e,searchRulesParams:{...n,page:r?r.page+1:n.page||0}},a),validate:e=>e.hits.length<n.hitsPerPage,...t})},browseSynonyms({indexName:e,searchSynonymsParams:r,...t},a){const n={page:0,...r,hitsPerPage:1e3};return T({func:r=>{const t=this.searchSynonyms({indexName:e,searchSynonymsParams:{...n,page:n.page}},a);return n.page+=1,t},validate:e=>e.hits.length<n.hitsPerPage,...t})},async chunkedBatch({indexName:e,objects:r,action:t="addObject",waitForTasks:a,batchSize:n=1e3},s){let o=[];const i=[],c=r.entries();for(const[d,u]of c)o.push({action:t,body:u}),o.length!==n&&d!==r.length-1||(i.push(await this.batch({indexName:e,batchWriteParams:{requests:o}},s)),o=[]);if(a)for(const d of i)await this.waitForTask({indexName:e,taskID:d.taskID});return i},async saveObjects({indexName:e,objects:r,waitForTasks:t,batchSize:a},n){return await this.chunkedBatch({indexName:e,objects:r,action:"addObject",waitForTasks:t,batchSize:a},n)},async deleteObjects({indexName:e,objectIDs:r,waitForTasks:t,batchSize:a},n){return await this.chunkedBatch({indexName:e,objects:r.map((e=>({objectID:e}))),action:"deleteObject",waitForTasks:t,batchSize:a},n)},async partialUpdateObjects({indexName:e,objects:r,createIfNotExists:t,waitForTasks:a,batchSize:n},s){return await this.chunkedBatch({indexName:e,objects:r,action:t?"partialUpdateObject":"partialUpdateObjectNoCreate",batchSize:n,waitForTasks:a},s)},async replaceAllObjects({indexName:e,objects:r,batchSize:t,scopes:a},n){const s=Math.floor(1e6*Math.random())+1e5,o=`${e}_tmp_${s}`;void 0===a&&(a=["settings","rules","synonyms"]);try{let s=await this.operationIndex({indexName:e,operationIndexParams:{operation:"copy",destination:o,scope:a}},n);const i=await this.chunkedBatch({indexName:o,objects:r,waitForTasks:!0,batchSize:t},n);await this.waitForTask({indexName:o,taskID:s.taskID}),s=await this.operationIndex({indexName:e,operationIndexParams:{operation:"copy",destination:o,scope:a}},n),await this.waitForTask({indexName:o,taskID:s.taskID});const c=await this.operationIndex({indexName:o,operationIndexParams:{operation:"move",destination:e}},n);return await this.waitForTask({indexName:o,taskID:c.taskID}),{copyOperationResponse:s,batchResponses:i,moveOperationResponse:c}}catch(i){throw await this.deleteIndex({indexName:o}),i}},async indexExists({indexName:e}){try{await this.getSettings({indexName:e})}catch(r){if(r instanceof R&&404===r.status)return!1;throw r}return!0},searchForHits(e,r){return this.search(e,r)},searchForFacets(e,r){return this.search(e,r)},addApiKey(e,r){if(!e)throw new Error("Parameter `apiKey` is required when calling `addApiKey`.");if(!e.acl)throw new Error("Parameter `apiKey.acl` is required when calling `addApiKey`.");const t="/1/keys",a={},n={},s={method:"POST",path:t,queryParameters:n,headers:a,data:e};return o.request(s,r)},addOrUpdateObject({indexName:e,objectID:r,body:t},a){if(!e)throw new Error("Parameter `indexName` is required when calling `addOrUpdateObject`.");if(!r)throw new Error("Parameter `objectID` is required when calling `addOrUpdateObject`.");if(!t)throw new Error("Parameter `body` is required when calling `addOrUpdateObject`.");const n="/1/indexes/{indexName}/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),s={},i={},c={method:"PUT",path:n,queryParameters:i,headers:s,data:t};return o.request(c,a)},appendSource(e,r){if(!e)throw new Error("Parameter `source` is required when calling `appendSource`.");if(!e.source)throw new Error("Parameter `source.source` is required when calling `appendSource`.");const t="/1/security/sources/append",a={},n={},s={method:"POST",path:t,queryParameters:n,headers:a,data:e};return o.request(s,r)},assignUserId({xAlgoliaUserID:e,assignUserIdParams:r},t){if(!e)throw new Error("Parameter `xAlgoliaUserID` is required when calling `assignUserId`.");if(!r)throw new Error("Parameter `assignUserIdParams` is required when calling `assignUserId`.");if(!r.cluster)throw new Error("Parameter `assignUserIdParams.cluster` is required when calling `assignUserId`.");const a="/1/clusters/mapping",n={},s={};void 0!==e&&(n["X-Algolia-User-ID"]=e.toString());const i={method:"POST",path:a,queryParameters:s,headers:n,data:r};return o.request(i,t)},batch({indexName:e,batchWriteParams:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `batch`.");if(!r)throw new Error("Parameter `batchWriteParams` is required when calling `batch`.");if(!r.requests)throw new Error("Parameter `batchWriteParams.requests` is required when calling `batch`.");const a="/1/indexes/{indexName}/batch".replace("{indexName}",encodeURIComponent(e)),n={},s={},i={method:"POST",path:a,queryParameters:s,headers:n,data:r};return o.request(i,t)},batchAssignUserIds({xAlgoliaUserID:e,batchAssignUserIdsParams:r},t){if(!e)throw new Error("Parameter `xAlgoliaUserID` is required when calling `batchAssignUserIds`.");if(!r)throw new Error("Parameter `batchAssignUserIdsParams` is required when calling `batchAssignUserIds`.");if(!r.cluster)throw new Error("Parameter `batchAssignUserIdsParams.cluster` is required when calling `batchAssignUserIds`.");if(!r.users)throw new Error("Parameter `batchAssignUserIdsParams.users` is required when calling `batchAssignUserIds`.");const a="/1/clusters/mapping/batch",n={},s={};void 0!==e&&(n["X-Algolia-User-ID"]=e.toString());const i={method:"POST",path:a,queryParameters:s,headers:n,data:r};return o.request(i,t)},batchDictionaryEntries({dictionaryName:e,batchDictionaryEntriesParams:r},t){if(!e)throw new Error("Parameter `dictionaryName` is required when calling `batchDictionaryEntries`.");if(!r)throw new Error("Parameter `batchDictionaryEntriesParams` is required when calling `batchDictionaryEntries`.");if(!r.requests)throw new Error("Parameter `batchDictionaryEntriesParams.requests` is required when calling `batchDictionaryEntries`.");const a="/1/dictionaries/{dictionaryName}/batch".replace("{dictionaryName}",encodeURIComponent(e)),n={},s={},i={method:"POST",path:a,queryParameters:s,headers:n,data:r};return o.request(i,t)},browse({indexName:e,browseParams:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `browse`.");const a="/1/indexes/{indexName}/browse".replace("{indexName}",encodeURIComponent(e)),n={},s={},i={method:"POST",path:a,queryParameters:s,headers:n,data:r||{},useReadTransporter:!0};return o.request(i,t)},clearObjects({indexName:e},r){if(!e)throw new Error("Parameter `indexName` is required when calling `clearObjects`.");const t="/1/indexes/{indexName}/clear".replace("{indexName}",encodeURIComponent(e)),a={},n={},s={method:"POST",path:t,queryParameters:n,headers:a};return o.request(s,r)},clearRules({indexName:e,forwardToReplicas:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `clearRules`.");const a="/1/indexes/{indexName}/rules/clear".replace("{indexName}",encodeURIComponent(e)),n={},s={};void 0!==r&&(s["forwardToReplicas"]=r.toString());const i={method:"POST",path:a,queryParameters:s,headers:n};return o.request(i,t)},clearSynonyms({indexName:e,forwardToReplicas:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `clearSynonyms`.");const a="/1/indexes/{indexName}/synonyms/clear".replace("{indexName}",encodeURIComponent(e)),n={},s={};void 0!==r&&(s["forwardToReplicas"]=r.toString());const i={method:"POST",path:a,queryParameters:s,headers:n};return o.request(i,t)},customDelete({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customDelete`.");const a="/{path}".replace("{path}",e),n={},s=r||{},i={method:"DELETE",path:a,queryParameters:s,headers:n};return o.request(i,t)},customGet({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customGet`.");const a="/{path}".replace("{path}",e),n={},s=r||{},i={method:"GET",path:a,queryParameters:s,headers:n};return o.request(i,t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPost`.");const n="/{path}".replace("{path}",e),s={},i=r||{},c={method:"POST",path:n,queryParameters:i,headers:s,data:t||{}};return o.request(c,a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPut`.");const n="/{path}".replace("{path}",e),s={},i=r||{},c={method:"PUT",path:n,queryParameters:i,headers:s,data:t||{}};return o.request(c,a)},deleteApiKey({key:e},r){if(!e)throw new Error("Parameter `key` is required when calling `deleteApiKey`.");const t="/1/keys/{key}".replace("{key}",encodeURIComponent(e)),a={},n={},s={method:"DELETE",path:t,queryParameters:n,headers:a};return o.request(s,r)},deleteBy({indexName:e,deleteByParams:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `deleteBy`.");if(!r)throw new Error("Parameter `deleteByParams` is required when calling `deleteBy`.");const a="/1/indexes/{indexName}/deleteByQuery".replace("{indexName}",encodeURIComponent(e)),n={},s={},i={method:"POST",path:a,queryParameters:s,headers:n,data:r};return o.request(i,t)},deleteIndex({indexName:e},r){if(!e)throw new Error("Parameter `indexName` is required when calling `deleteIndex`.");const t="/1/indexes/{indexName}".replace("{indexName}",encodeURIComponent(e)),a={},n={},s={method:"DELETE",path:t,queryParameters:n,headers:a};return o.request(s,r)},deleteObject({indexName:e,objectID:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `deleteObject`.");if(!r)throw new Error("Parameter `objectID` is required when calling `deleteObject`.");const a="/1/indexes/{indexName}/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),n={},s={},i={method:"DELETE",path:a,queryParameters:s,headers:n};return o.request(i,t)},deleteRule({indexName:e,objectID:r,forwardToReplicas:t},a){if(!e)throw new Error("Parameter `indexName` is required when calling `deleteRule`.");if(!r)throw new Error("Parameter `objectID` is required when calling `deleteRule`.");const n="/1/indexes/{indexName}/rules/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),s={},i={};void 0!==t&&(i["forwardToReplicas"]=t.toString());const c={method:"DELETE",path:n,queryParameters:i,headers:s};return o.request(c,a)},deleteSource({source:e},r){if(!e)throw new Error("Parameter `source` is required when calling `deleteSource`.");const t="/1/security/sources/{source}".replace("{source}",encodeURIComponent(e)),a={},n={},s={method:"DELETE",path:t,queryParameters:n,headers:a};return o.request(s,r)},deleteSynonym({indexName:e,objectID:r,forwardToReplicas:t},a){if(!e)throw new Error("Parameter `indexName` is required when calling `deleteSynonym`.");if(!r)throw new Error("Parameter `objectID` is required when calling `deleteSynonym`.");const n="/1/indexes/{indexName}/synonyms/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),s={},i={};void 0!==t&&(i["forwardToReplicas"]=t.toString());const c={method:"DELETE",path:n,queryParameters:i,headers:s};return o.request(c,a)},getApiKey({key:e},r){if(!e)throw new Error("Parameter `key` is required when calling `getApiKey`.");const t="/1/keys/{key}".replace("{key}",encodeURIComponent(e)),a={},n={},s={method:"GET",path:t,queryParameters:n,headers:a};return o.request(s,r)},getAppTask({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `getAppTask`.");const t="/1/task/{taskID}".replace("{taskID}",encodeURIComponent(e)),a={},n={},s={method:"GET",path:t,queryParameters:n,headers:a};return o.request(s,r)},getDictionaryLanguages(e){const r="/1/dictionaries/*/languages",t={},a={},n={method:"GET",path:r,queryParameters:a,headers:t};return o.request(n,e)},getDictionarySettings(e){const r="/1/dictionaries/*/settings",t={},a={},n={method:"GET",path:r,queryParameters:a,headers:t};return o.request(n,e)},getLogs({offset:e,length:r,indexName:t,type:a}={},n=void 0){const s="/1/logs",i={},c={};void 0!==e&&(c["offset"]=e.toString()),void 0!==r&&(c["length"]=r.toString()),void 0!==t&&(c["indexName"]=t.toString()),void 0!==a&&(c["type"]=a.toString());const d={method:"GET",path:s,queryParameters:c,headers:i};return o.request(d,n)},getObject({indexName:e,objectID:r,attributesToRetrieve:t},a){if(!e)throw new Error("Parameter `indexName` is required when calling `getObject`.");if(!r)throw new Error("Parameter `objectID` is required when calling `getObject`.");const n="/1/indexes/{indexName}/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),s={},i={};void 0!==t&&(i["attributesToRetrieve"]=t.toString());const c={method:"GET",path:n,queryParameters:i,headers:s};return o.request(c,a)},getObjects(e,r){if(!e)throw new Error("Parameter `getObjectsParams` is required when calling `getObjects`.");if(!e.requests)throw new Error("Parameter `getObjectsParams.requests` is required when calling `getObjects`.");const t="/1/indexes/*/objects",a={},n={},s={method:"POST",path:t,queryParameters:n,headers:a,data:e,useReadTransporter:!0,cacheable:!0};return o.request(s,r)},getRule({indexName:e,objectID:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `getRule`.");if(!r)throw new Error("Parameter `objectID` is required when calling `getRule`.");const a="/1/indexes/{indexName}/rules/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),n={},s={},i={method:"GET",path:a,queryParameters:s,headers:n};return o.request(i,t)},getSettings({indexName:e},r){if(!e)throw new Error("Parameter `indexName` is required when calling `getSettings`.");const t="/1/indexes/{indexName}/settings".replace("{indexName}",encodeURIComponent(e)),a={},n={},s={method:"GET",path:t,queryParameters:n,headers:a};return o.request(s,r)},getSources(e){const r="/1/security/sources",t={},a={},n={method:"GET",path:r,queryParameters:a,headers:t};return o.request(n,e)},getSynonym({indexName:e,objectID:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `getSynonym`.");if(!r)throw new Error("Parameter `objectID` is required when calling `getSynonym`.");const a="/1/indexes/{indexName}/synonyms/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),n={},s={},i={method:"GET",path:a,queryParameters:s,headers:n};return o.request(i,t)},getTask({indexName:e,taskID:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `getTask`.");if(!r)throw new Error("Parameter `taskID` is required when calling `getTask`.");const a="/1/indexes/{indexName}/task/{taskID}".replace("{indexName}",encodeURIComponent(e)).replace("{taskID}",encodeURIComponent(r)),n={},s={},i={method:"GET",path:a,queryParameters:s,headers:n};return o.request(i,t)},getTopUserIds(e){const r="/1/clusters/mapping/top",t={},a={},n={method:"GET",path:r,queryParameters:a,headers:t};return o.request(n,e)},getUserId({userID:e},r){if(!e)throw new Error("Parameter `userID` is required when calling `getUserId`.");const t="/1/clusters/mapping/{userID}".replace("{userID}",encodeURIComponent(e)),a={},n={},s={method:"GET",path:t,queryParameters:n,headers:a};return o.request(s,r)},hasPendingMappings({getClusters:e}={},r=void 0){const t="/1/clusters/mapping/pending",a={},n={};void 0!==e&&(n["getClusters"]=e.toString());const s={method:"GET",path:t,queryParameters:n,headers:a};return o.request(s,r)},listApiKeys(e){const r="/1/keys",t={},a={},n={method:"GET",path:r,queryParameters:a,headers:t};return o.request(n,e)},listClusters(e){const r="/1/clusters",t={},a={},n={method:"GET",path:r,queryParameters:a,headers:t};return o.request(n,e)},listIndices({page:e,hitsPerPage:r}={},t=void 0){const a="/1/indexes",n={},s={};void 0!==e&&(s["page"]=e.toString()),void 0!==r&&(s["hitsPerPage"]=r.toString());const i={method:"GET",path:a,queryParameters:s,headers:n};return o.request(i,t)},listUserIds({page:e,hitsPerPage:r}={},t=void 0){const a="/1/clusters/mapping",n={},s={};void 0!==e&&(s["page"]=e.toString()),void 0!==r&&(s["hitsPerPage"]=r.toString());const i={method:"GET",path:a,queryParameters:s,headers:n};return o.request(i,t)},multipleBatch(e,r){if(!e)throw new Error("Parameter `batchParams` is required when calling `multipleBatch`.");if(!e.requests)throw new Error("Parameter `batchParams.requests` is required when calling `multipleBatch`.");const t="/1/indexes/*/batch",a={},n={},s={method:"POST",path:t,queryParameters:n,headers:a,data:e};return o.request(s,r)},operationIndex({indexName:e,operationIndexParams:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `operationIndex`.");if(!r)throw new Error("Parameter `operationIndexParams` is required when calling `operationIndex`.");if(!r.operation)throw new Error("Parameter `operationIndexParams.operation` is required when calling `operationIndex`.");if(!r.destination)throw new Error("Parameter `operationIndexParams.destination` is required when calling `operationIndex`.");const a="/1/indexes/{indexName}/operation".replace("{indexName}",encodeURIComponent(e)),n={},s={},i={method:"POST",path:a,queryParameters:s,headers:n,data:r};return o.request(i,t)},partialUpdateObject({indexName:e,objectID:r,attributesToUpdate:t,createIfNotExists:a},n){if(!e)throw new Error("Parameter `indexName` is required when calling `partialUpdateObject`.");if(!r)throw new Error("Parameter `objectID` is required when calling `partialUpdateObject`.");if(!t)throw new Error("Parameter `attributesToUpdate` is required when calling `partialUpdateObject`.");const s="/1/indexes/{indexName}/{objectID}/partial".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),i={},c={};void 0!==a&&(c["createIfNotExists"]=a.toString());const d={method:"POST",path:s,queryParameters:c,headers:i,data:t};return o.request(d,n)},removeUserId({userID:e},r){if(!e)throw new Error("Parameter `userID` is required when calling `removeUserId`.");const t="/1/clusters/mapping/{userID}".replace("{userID}",encodeURIComponent(e)),a={},n={},s={method:"DELETE",path:t,queryParameters:n,headers:a};return o.request(s,r)},replaceSources({source:e},r){if(!e)throw new Error("Parameter `source` is required when calling `replaceSources`.");const t="/1/security/sources",a={},n={},s={method:"PUT",path:t,queryParameters:n,headers:a,data:e};return o.request(s,r)},restoreApiKey({key:e},r){if(!e)throw new Error("Parameter `key` is required when calling `restoreApiKey`.");const t="/1/keys/{key}/restore".replace("{key}",encodeURIComponent(e)),a={},n={},s={method:"POST",path:t,queryParameters:n,headers:a};return o.request(s,r)},saveObject({indexName:e,body:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `saveObject`.");if(!r)throw new Error("Parameter `body` is required when calling `saveObject`.");const a="/1/indexes/{indexName}".replace("{indexName}",encodeURIComponent(e)),n={},s={},i={method:"POST",path:a,queryParameters:s,headers:n,data:r};return o.request(i,t)},saveRule({indexName:e,objectID:r,rule:t,forwardToReplicas:a},n){if(!e)throw new Error("Parameter `indexName` is required when calling `saveRule`.");if(!r)throw new Error("Parameter `objectID` is required when calling `saveRule`.");if(!t)throw new Error("Parameter `rule` is required when calling `saveRule`.");if(!t.objectID)throw new Error("Parameter `rule.objectID` is required when calling `saveRule`.");if(!t.consequence)throw new Error("Parameter `rule.consequence` is required when calling `saveRule`.");const s="/1/indexes/{indexName}/rules/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),i={},c={};void 0!==a&&(c["forwardToReplicas"]=a.toString());const d={method:"PUT",path:s,queryParameters:c,headers:i,data:t};return o.request(d,n)},saveRules({indexName:e,rules:r,forwardToReplicas:t,clearExistingRules:a},n){if(!e)throw new Error("Parameter `indexName` is required when calling `saveRules`.");if(!r)throw new Error("Parameter `rules` is required when calling `saveRules`.");const s="/1/indexes/{indexName}/rules/batch".replace("{indexName}",encodeURIComponent(e)),i={},c={};void 0!==t&&(c["forwardToReplicas"]=t.toString()),void 0!==a&&(c["clearExistingRules"]=a.toString());const d={method:"POST",path:s,queryParameters:c,headers:i,data:r};return o.request(d,n)},saveSynonym({indexName:e,objectID:r,synonymHit:t,forwardToReplicas:a},n){if(!e)throw new Error("Parameter `indexName` is required when calling `saveSynonym`.");if(!r)throw new Error("Parameter `objectID` is required when calling `saveSynonym`.");if(!t)throw new Error("Parameter `synonymHit` is required when calling `saveSynonym`.");if(!t.objectID)throw new Error("Parameter `synonymHit.objectID` is required when calling `saveSynonym`.");if(!t.type)throw new Error("Parameter `synonymHit.type` is required when calling `saveSynonym`.");const s="/1/indexes/{indexName}/synonyms/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),i={},c={};void 0!==a&&(c["forwardToReplicas"]=a.toString());const d={method:"PUT",path:s,queryParameters:c,headers:i,data:t};return o.request(d,n)},saveSynonyms({indexName:e,synonymHit:r,forwardToReplicas:t,replaceExistingSynonyms:a},n){if(!e)throw new Error("Parameter `indexName` is required when calling `saveSynonyms`.");if(!r)throw new Error("Parameter `synonymHit` is required when calling `saveSynonyms`.");const s="/1/indexes/{indexName}/synonyms/batch".replace("{indexName}",encodeURIComponent(e)),i={},c={};void 0!==t&&(c["forwardToReplicas"]=t.toString()),void 0!==a&&(c["replaceExistingSynonyms"]=a.toString());const d={method:"POST",path:s,queryParameters:c,headers:i,data:r};return o.request(d,n)},search(e,r){if(e&&Array.isArray(e)){const r={requests:e.map((({params:e,...r})=>"facet"===r.type?{...r,...e,type:"facet"}:{...r,...e,facet:void 0,maxFacetHits:void 0,facetQuery:void 0}))};e=r}if(!e)throw new Error("Parameter `searchMethodParams` is required when calling `search`.");if(!e.requests)throw new Error("Parameter `searchMethodParams.requests` is required when calling `search`.");const t="/1/indexes/*/queries",a={},n={},s={method:"POST",path:t,queryParameters:n,headers:a,data:e,useReadTransporter:!0,cacheable:!0};return o.request(s,r)},searchDictionaryEntries({dictionaryName:e,searchDictionaryEntriesParams:r},t){if(!e)throw new Error("Parameter `dictionaryName` is required when calling `searchDictionaryEntries`.");if(!r)throw new Error("Parameter `searchDictionaryEntriesParams` is required when calling `searchDictionaryEntries`.");if(!r.query)throw new Error("Parameter `searchDictionaryEntriesParams.query` is required when calling `searchDictionaryEntries`.");const a="/1/dictionaries/{dictionaryName}/search".replace("{dictionaryName}",encodeURIComponent(e)),n={},s={},i={method:"POST",path:a,queryParameters:s,headers:n,data:r,useReadTransporter:!0,cacheable:!0};return o.request(i,t)},searchForFacetValues({indexName:e,facetName:r,searchForFacetValuesRequest:t},a){if(!e)throw new Error("Parameter `indexName` is required when calling `searchForFacetValues`.");if(!r)throw new Error("Parameter `facetName` is required when calling `searchForFacetValues`.");const n="/1/indexes/{indexName}/facets/{facetName}/query".replace("{indexName}",encodeURIComponent(e)).replace("{facetName}",encodeURIComponent(r)),s={},i={},c={method:"POST",path:n,queryParameters:i,headers:s,data:t||{},useReadTransporter:!0,cacheable:!0};return o.request(c,a)},searchRules({indexName:e,searchRulesParams:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `searchRules`.");const a="/1/indexes/{indexName}/rules/search".replace("{indexName}",encodeURIComponent(e)),n={},s={},i={method:"POST",path:a,queryParameters:s,headers:n,data:r||{},useReadTransporter:!0,cacheable:!0};return o.request(i,t)},searchSingleIndex({indexName:e,searchParams:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `searchSingleIndex`.");const a="/1/indexes/{indexName}/query".replace("{indexName}",encodeURIComponent(e)),n={},s={},i={method:"POST",path:a,queryParameters:s,headers:n,data:r||{},useReadTransporter:!0,cacheable:!0};return o.request(i,t)},searchSynonyms({indexName:e,searchSynonymsParams:r},t){if(!e)throw new Error("Parameter `indexName` is required when calling `searchSynonyms`.");const a="/1/indexes/{indexName}/synonyms/search".replace("{indexName}",encodeURIComponent(e)),n={},s={},i={method:"POST",path:a,queryParameters:s,headers:n,data:r||{},useReadTransporter:!0,cacheable:!0};return o.request(i,t)},searchUserIds(e,r){if(!e)throw new Error("Parameter `searchUserIdsParams` is required when calling `searchUserIds`.");if(!e.query)throw new Error("Parameter `searchUserIdsParams.query` is required when calling `searchUserIds`.");const t="/1/clusters/mapping/search",a={},n={},s={method:"POST",path:t,queryParameters:n,headers:a,data:e,useReadTransporter:!0,cacheable:!0};return o.request(s,r)},setDictionarySettings(e,r){if(!e)throw new Error("Parameter `dictionarySettingsParams` is required when calling `setDictionarySettings`.");if(!e.disableStandardEntries)throw new Error("Parameter `dictionarySettingsParams.disableStandardEntries` is required when calling `setDictionarySettings`.");const t="/1/dictionaries/*/settings",a={},n={},s={method:"PUT",path:t,queryParameters:n,headers:a,data:e};return o.request(s,r)},setSettings({indexName:e,indexSettings:r,forwardToReplicas:t},a){if(!e)throw new Error("Parameter `indexName` is required when calling `setSettings`.");if(!r)throw new Error("Parameter `indexSettings` is required when calling `setSettings`.");const n="/1/indexes/{indexName}/settings".replace("{indexName}",encodeURIComponent(e)),s={},i={};void 0!==t&&(i["forwardToReplicas"]=t.toString());const c={method:"PUT",path:n,queryParameters:i,headers:s,data:r};return o.request(c,a)},updateApiKey({key:e,apiKey:r},t){if(!e)throw new Error("Parameter `key` is required when calling `updateApiKey`.");if(!r)throw new Error("Parameter `apiKey` is required when calling `updateApiKey`.");if(!r.acl)throw new Error("Parameter `apiKey.acl` is required when calling `updateApiKey`.");const a="/1/keys/{key}".replace("{key}",encodeURIComponent(e)),n={},s={},i={method:"PUT",path:a,queryParameters:s,headers:n,data:r};return o.request(i,t)}}}function Ee(e,r,t){if(!e||"string"!==typeof e)throw new Error("`appId` is missing.");if(!r||"string"!==typeof r)throw new Error("`apiKey` is missing.");return fe({appId:e,apiKey:r,timeouts:{connect:1e3,read:2e3,write:3e4},logger:S(),requester:l(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:f(),requestsCache:f({serializable:!1}),hostsCache:y({caches:[P({key:`${qe}-${e}`}),f()]}),...t})}var Ie="1.20.0",Te=["eu","us"];function De(e){const r="data.{region}.algolia.com".replace("{region}",e);return[{url:r,accept:"readWrite",protocol:"https"}]}function Se(e){return"onDemand"===e.type}function ve(e){return"schedule"===e.type}function xe(e){return"subscription"===e.type}function be({appId:e,apiKey:r,authMode:t,algoliaAgents:a,region:n,...s}){const o=I(e,r,t),i=W({hosts:De(n),...s,algoliaAgent:D({algoliaAgents:a,client:"Ingestion",version:Ie}),baseHeaders:{"content-type":"text/plain",...o.headers(),...s.baseHeaders},baseQueryParameters:{...o.queryParameters(),...s.baseQueryParameters}});return{transporter:i,appId:e,apiKey:r,clearCache(){return Promise.all([i.requestsCache.clear(),i.responsesCache.clear()]).then((()=>{}))},get _ua(){return i.algoliaAgent.value},addAlgoliaAgent(e,r){i.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){t&&"WithinHeaders"!==t?i.baseQueryParameters["x-algolia-api-key"]=e:i.baseHeaders["x-algolia-api-key"]=e},createAuthentication(e,r){if(!e)throw new Error("Parameter `authenticationCreate` is required when calling `createAuthentication`.");if(!e.type)throw new Error("Parameter `authenticationCreate.type` is required when calling `createAuthentication`.");if(!e.name)throw new Error("Parameter `authenticationCreate.name` is required when calling `createAuthentication`.");if(!e.input)throw new Error("Parameter `authenticationCreate.input` is required when calling `createAuthentication`.");const t="/1/authentications",a={},n={},s={method:"POST",path:t,queryParameters:n,headers:a,data:e};return i.request(s,r)},createDestination(e,r){if(!e)throw new Error("Parameter `destinationCreate` is required when calling `createDestination`.");if(!e.type)throw new Error("Parameter `destinationCreate.type` is required when calling `createDestination`.");if(!e.name)throw new Error("Parameter `destinationCreate.name` is required when calling `createDestination`.");if(!e.input)throw new Error("Parameter `destinationCreate.input` is required when calling `createDestination`.");const t="/1/destinations",a={},n={},s={method:"POST",path:t,queryParameters:n,headers:a,data:e};return i.request(s,r)},createSource(e,r){if(!e)throw new Error("Parameter `sourceCreate` is required when calling `createSource`.");if(!e.type)throw new Error("Parameter `sourceCreate.type` is required when calling `createSource`.");if(!e.name)throw new Error("Parameter `sourceCreate.name` is required when calling `createSource`.");const t="/1/sources",a={},n={},s={method:"POST",path:t,queryParameters:n,headers:a,data:e};return i.request(s,r)},createTask(e,r){if(!e)throw new Error("Parameter `taskCreate` is required when calling `createTask`.");if(!e.sourceID)throw new Error("Parameter `taskCreate.sourceID` is required when calling `createTask`.");if(!e.destinationID)throw new Error("Parameter `taskCreate.destinationID` is required when calling `createTask`.");if(!e.action)throw new Error("Parameter `taskCreate.action` is required when calling `createTask`.");const t="/2/tasks",a={},n={},s={method:"POST",path:t,queryParameters:n,headers:a,data:e};return i.request(s,r)},createTaskV1(e,r){if(!e)throw new Error("Parameter `taskCreate` is required when calling `createTaskV1`.");if(!e.sourceID)throw new Error("Parameter `taskCreate.sourceID` is required when calling `createTaskV1`.");if(!e.destinationID)throw new Error("Parameter `taskCreate.destinationID` is required when calling `createTaskV1`.");if(!e.trigger)throw new Error("Parameter `taskCreate.trigger` is required when calling `createTaskV1`.");if(!e.action)throw new Error("Parameter `taskCreate.action` is required when calling `createTaskV1`.");const t="/1/tasks",a={},n={},s={method:"POST",path:t,queryParameters:n,headers:a,data:e};return i.request(s,r)},createTransformation(e,r){if(!e)throw new Error("Parameter `transformationCreate` is required when calling `createTransformation`.");if(!e.code)throw new Error("Parameter `transformationCreate.code` is required when calling `createTransformation`.");if(!e.name)throw new Error("Parameter `transformationCreate.name` is required when calling `createTransformation`.");const t="/1/transformations",a={},n={},s={method:"POST",path:t,queryParameters:n,headers:a,data:e};return i.request(s,r)},customDelete({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customDelete`.");const a="/{path}".replace("{path}",e),n={},s=r||{},o={method:"DELETE",path:a,queryParameters:s,headers:n};return i.request(o,t)},customGet({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customGet`.");const a="/{path}".replace("{path}",e),n={},s=r||{},o={method:"GET",path:a,queryParameters:s,headers:n};return i.request(o,t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPost`.");const n="/{path}".replace("{path}",e),s={},o=r||{},c={method:"POST",path:n,queryParameters:o,headers:s,data:t||{}};return i.request(c,a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPut`.");const n="/{path}".replace("{path}",e),s={},o=r||{},c={method:"PUT",path:n,queryParameters:o,headers:s,data:t||{}};return i.request(c,a)},deleteAuthentication({authenticationID:e},r){if(!e)throw new Error("Parameter `authenticationID` is required when calling `deleteAuthentication`.");const t="/1/authentications/{authenticationID}".replace("{authenticationID}",encodeURIComponent(e)),a={},n={},s={method:"DELETE",path:t,queryParameters:n,headers:a};return i.request(s,r)},deleteDestination({destinationID:e},r){if(!e)throw new Error("Parameter `destinationID` is required when calling `deleteDestination`.");const t="/1/destinations/{destinationID}".replace("{destinationID}",encodeURIComponent(e)),a={},n={},s={method:"DELETE",path:t,queryParameters:n,headers:a};return i.request(s,r)},deleteSource({sourceID:e},r){if(!e)throw new Error("Parameter `sourceID` is required when calling `deleteSource`.");const t="/1/sources/{sourceID}".replace("{sourceID}",encodeURIComponent(e)),a={},n={},s={method:"DELETE",path:t,queryParameters:n,headers:a};return i.request(s,r)},deleteTask({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `deleteTask`.");const t="/2/tasks/{taskID}".replace("{taskID}",encodeURIComponent(e)),a={},n={},s={method:"DELETE",path:t,queryParameters:n,headers:a};return i.request(s,r)},deleteTaskV1({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `deleteTaskV1`.");const t="/1/tasks/{taskID}".replace("{taskID}",encodeURIComponent(e)),a={},n={},s={method:"DELETE",path:t,queryParameters:n,headers:a};return i.request(s,r)},deleteTransformation({transformationID:e},r){if(!e)throw new Error("Parameter `transformationID` is required when calling `deleteTransformation`.");const t="/1/transformations/{transformationID}".replace("{transformationID}",encodeURIComponent(e)),a={},n={},s={method:"DELETE",path:t,queryParameters:n,headers:a};return i.request(s,r)},disableTask({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `disableTask`.");const t="/2/tasks/{taskID}/disable".replace("{taskID}",encodeURIComponent(e)),a={},n={},s={method:"PUT",path:t,queryParameters:n,headers:a};return i.request(s,r)},disableTaskV1({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `disableTaskV1`.");const t="/1/tasks/{taskID}/disable".replace("{taskID}",encodeURIComponent(e)),a={},n={},s={method:"PUT",path:t,queryParameters:n,headers:a};return i.request(s,r)},enableTask({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `enableTask`.");const t="/2/tasks/{taskID}/enable".replace("{taskID}",encodeURIComponent(e)),a={},n={},s={method:"PUT",path:t,queryParameters:n,headers:a};return i.request(s,r)},enableTaskV1({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `enableTaskV1`.");const t="/1/tasks/{taskID}/enable".replace("{taskID}",encodeURIComponent(e)),a={},n={},s={method:"PUT",path:t,queryParameters:n,headers:a};return i.request(s,r)},getAuthentication({authenticationID:e},r){if(!e)throw new Error("Parameter `authenticationID` is required when calling `getAuthentication`.");const t="/1/authentications/{authenticationID}".replace("{authenticationID}",encodeURIComponent(e)),a={},n={},s={method:"GET",path:t,queryParameters:n,headers:a};return i.request(s,r)},getDestination({destinationID:e},r){if(!e)throw new Error("Parameter `destinationID` is required when calling `getDestination`.");const t="/1/destinations/{destinationID}".replace("{destinationID}",encodeURIComponent(e)),a={},n={},s={method:"GET",path:t,queryParameters:n,headers:a};return i.request(s,r)},getEvent({runID:e,eventID:r},t){if(!e)throw new Error("Parameter `runID` is required when calling `getEvent`.");if(!r)throw new Error("Parameter `eventID` is required when calling `getEvent`.");const a="/1/runs/{runID}/events/{eventID}".replace("{runID}",encodeURIComponent(e)).replace("{eventID}",encodeURIComponent(r)),n={},s={},o={method:"GET",path:a,queryParameters:s,headers:n};return i.request(o,t)},getRun({runID:e},r){if(!e)throw new Error("Parameter `runID` is required when calling `getRun`.");const t="/1/runs/{runID}".replace("{runID}",encodeURIComponent(e)),a={},n={},s={method:"GET",path:t,queryParameters:n,headers:a};return i.request(s,r)},getSource({sourceID:e},r){if(!e)throw new Error("Parameter `sourceID` is required when calling `getSource`.");const t="/1/sources/{sourceID}".replace("{sourceID}",encodeURIComponent(e)),a={},n={},s={method:"GET",path:t,queryParameters:n,headers:a};return i.request(s,r)},getTask({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `getTask`.");const t="/2/tasks/{taskID}".replace("{taskID}",encodeURIComponent(e)),a={},n={},s={method:"GET",path:t,queryParameters:n,headers:a};return i.request(s,r)},getTaskV1({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `getTaskV1`.");const t="/1/tasks/{taskID}".replace("{taskID}",encodeURIComponent(e)),a={},n={},s={method:"GET",path:t,queryParameters:n,headers:a};return i.request(s,r)},getTransformation({transformationID:e},r){if(!e)throw new Error("Parameter `transformationID` is required when calling `getTransformation`.");const t="/1/transformations/{transformationID}".replace("{transformationID}",encodeURIComponent(e)),a={},n={},s={method:"GET",path:t,queryParameters:n,headers:a};return i.request(s,r)},listAuthentications({itemsPerPage:e,page:r,type:t,platform:a,sort:n,order:s}={},o=void 0){const c="/1/authentications",d={},u={};void 0!==e&&(u["itemsPerPage"]=e.toString()),void 0!==r&&(u["page"]=r.toString()),void 0!==t&&(u["type"]=t.toString()),void 0!==a&&(u["platform"]=a.toString()),void 0!==n&&(u["sort"]=n.toString()),void 0!==s&&(u["order"]=s.toString());const h={method:"GET",path:c,queryParameters:u,headers:d};return i.request(h,o)},listDestinations({itemsPerPage:e,page:r,type:t,authenticationID:a,transformationID:n,sort:s,order:o}={},c=void 0){const d="/1/destinations",u={},h={};void 0!==e&&(h["itemsPerPage"]=e.toString()),void 0!==r&&(h["page"]=r.toString()),void 0!==t&&(h["type"]=t.toString()),void 0!==a&&(h["authenticationID"]=a.toString()),void 0!==n&&(h["transformationID"]=n.toString()),void 0!==s&&(h["sort"]=s.toString()),void 0!==o&&(h["order"]=o.toString());const l={method:"GET",path:d,queryParameters:h,headers:u};return i.request(l,c)},listEvents({runID:e,itemsPerPage:r,page:t,status:a,type:n,sort:s,order:o,startDate:c,endDate:d},u){if(!e)throw new Error("Parameter `runID` is required when calling `listEvents`.");const h="/1/runs/{runID}/events".replace("{runID}",encodeURIComponent(e)),l={},m={};void 0!==r&&(m["itemsPerPage"]=r.toString()),void 0!==t&&(m["page"]=t.toString()),void 0!==a&&(m["status"]=a.toString()),void 0!==n&&(m["type"]=n.toString()),void 0!==s&&(m["sort"]=s.toString()),void 0!==o&&(m["order"]=o.toString()),void 0!==c&&(m["startDate"]=c.toString()),void 0!==d&&(m["endDate"]=d.toString());const p={method:"GET",path:h,queryParameters:m,headers:l};return i.request(p,u)},listRuns({itemsPerPage:e,page:r,status:t,type:a,taskID:n,sort:s,order:o,startDate:c,endDate:d}={},u=void 0){const h="/1/runs",l={},m={};void 0!==e&&(m["itemsPerPage"]=e.toString()),void 0!==r&&(m["page"]=r.toString()),void 0!==t&&(m["status"]=t.toString()),void 0!==a&&(m["type"]=a.toString()),void 0!==n&&(m["taskID"]=n.toString()),void 0!==s&&(m["sort"]=s.toString()),void 0!==o&&(m["order"]=o.toString()),void 0!==c&&(m["startDate"]=c.toString()),void 0!==d&&(m["endDate"]=d.toString());const p={method:"GET",path:h,queryParameters:m,headers:l};return i.request(p,u)},listSources({itemsPerPage:e,page:r,type:t,authenticationID:a,sort:n,order:s}={},o=void 0){const c="/1/sources",d={},u={};void 0!==e&&(u["itemsPerPage"]=e.toString()),void 0!==r&&(u["page"]=r.toString()),void 0!==t&&(u["type"]=t.toString()),void 0!==a&&(u["authenticationID"]=a.toString()),void 0!==n&&(u["sort"]=n.toString()),void 0!==s&&(u["order"]=s.toString());const h={method:"GET",path:c,queryParameters:u,headers:d};return i.request(h,o)},listTasks({itemsPerPage:e,page:r,action:t,enabled:a,sourceID:n,sourceType:s,destinationID:o,triggerType:c,withEmailNotifications:d,sort:u,order:h}={},l=void 0){const m="/2/tasks",p={},g={};void 0!==e&&(g["itemsPerPage"]=e.toString()),void 0!==r&&(g["page"]=r.toString()),void 0!==t&&(g["action"]=t.toString()),void 0!==a&&(g["enabled"]=a.toString()),void 0!==n&&(g["sourceID"]=n.toString()),void 0!==s&&(g["sourceType"]=s.toString()),void 0!==o&&(g["destinationID"]=o.toString()),void 0!==c&&(g["triggerType"]=c.toString()),void 0!==d&&(g["withEmailNotifications"]=d.toString()),void 0!==u&&(g["sort"]=u.toString()),void 0!==h&&(g["order"]=h.toString());const w={method:"GET",path:m,queryParameters:g,headers:p};return i.request(w,l)},listTasksV1({itemsPerPage:e,page:r,action:t,enabled:a,sourceID:n,destinationID:s,triggerType:o,sort:c,order:d}={},u=void 0){const h="/1/tasks",l={},m={};void 0!==e&&(m["itemsPerPage"]=e.toString()),void 0!==r&&(m["page"]=r.toString()),void 0!==t&&(m["action"]=t.toString()),void 0!==a&&(m["enabled"]=a.toString()),void 0!==n&&(m["sourceID"]=n.toString()),void 0!==s&&(m["destinationID"]=s.toString()),void 0!==o&&(m["triggerType"]=o.toString()),void 0!==c&&(m["sort"]=c.toString()),void 0!==d&&(m["order"]=d.toString());const p={method:"GET",path:h,queryParameters:m,headers:l};return i.request(p,u)},listTransformations({itemsPerPage:e,page:r,sort:t,order:a}={},n=void 0){const s="/1/transformations",o={},c={};void 0!==e&&(c["itemsPerPage"]=e.toString()),void 0!==r&&(c["page"]=r.toString()),void 0!==t&&(c["sort"]=t.toString()),void 0!==a&&(c["order"]=a.toString());const d={method:"GET",path:s,queryParameters:c,headers:o};return i.request(d,n)},pushTask({taskID:e,pushTaskPayload:r,watch:t},a){if(!e)throw new Error("Parameter `taskID` is required when calling `pushTask`.");if(!r)throw new Error("Parameter `pushTaskPayload` is required when calling `pushTask`.");if(!r.action)throw new Error("Parameter `pushTaskPayload.action` is required when calling `pushTask`.");if(!r.records)throw new Error("Parameter `pushTaskPayload.records` is required when calling `pushTask`.");const n="/2/tasks/{taskID}/push".replace("{taskID}",encodeURIComponent(e)),s={},o={};void 0!==t&&(o["watch"]=t.toString());const c={method:"POST",path:n,queryParameters:o,headers:s,data:r};return a={timeouts:{connect:18e4,read:18e4,write:18e4,...a?.timeouts}},i.request(c,a)},runSource({sourceID:e,runSourcePayload:r},t){if(!e)throw new Error("Parameter `sourceID` is required when calling `runSource`.");const a="/1/sources/{sourceID}/run".replace("{sourceID}",encodeURIComponent(e)),n={},s={},o={method:"POST",path:a,queryParameters:s,headers:n,data:r||{}};return i.request(o,t)},runTask({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `runTask`.");const t="/2/tasks/{taskID}/run".replace("{taskID}",encodeURIComponent(e)),a={},n={},s={method:"POST",path:t,queryParameters:n,headers:a};return i.request(s,r)},runTaskV1({taskID:e},r){if(!e)throw new Error("Parameter `taskID` is required when calling `runTaskV1`.");const t="/1/tasks/{taskID}/run".replace("{taskID}",encodeURIComponent(e)),a={},n={},s={method:"POST",path:t,queryParameters:n,headers:a};return i.request(s,r)},searchAuthentications(e,r){if(!e)throw new Error("Parameter `authenticationSearch` is required when calling `searchAuthentications`.");if(!e.authenticationIDs)throw new Error("Parameter `authenticationSearch.authenticationIDs` is required when calling `searchAuthentications`.");const t="/1/authentications/search",a={},n={},s={method:"POST",path:t,queryParameters:n,headers:a,data:e};return i.request(s,r)},searchDestinations(e,r){if(!e)throw new Error("Parameter `destinationSearch` is required when calling `searchDestinations`.");if(!e.destinationIDs)throw new Error("Parameter `destinationSearch.destinationIDs` is required when calling `searchDestinations`.");const t="/1/destinations/search",a={},n={},s={method:"POST",path:t,queryParameters:n,headers:a,data:e};return i.request(s,r)},searchSources(e,r){if(!e)throw new Error("Parameter `sourceSearch` is required when calling `searchSources`.");if(!e.sourceIDs)throw new Error("Parameter `sourceSearch.sourceIDs` is required when calling `searchSources`.");const t="/1/sources/search",a={},n={},s={method:"POST",path:t,queryParameters:n,headers:a,data:e};return i.request(s,r)},searchTasks(e,r){if(!e)throw new Error("Parameter `taskSearch` is required when calling `searchTasks`.");if(!e.taskIDs)throw new Error("Parameter `taskSearch.taskIDs` is required when calling `searchTasks`.");const t="/2/tasks/search",a={},n={},s={method:"POST",path:t,queryParameters:n,headers:a,data:e};return i.request(s,r)},searchTasksV1(e,r){if(!e)throw new Error("Parameter `taskSearch` is required when calling `searchTasksV1`.");if(!e.taskIDs)throw new Error("Parameter `taskSearch.taskIDs` is required when calling `searchTasksV1`.");const t="/1/tasks/search",a={},n={},s={method:"POST",path:t,queryParameters:n,headers:a,data:e};return i.request(s,r)},searchTransformations(e,r){if(!e)throw new Error("Parameter `transformationSearch` is required when calling `searchTransformations`.");if(!e.transformationIDs)throw new Error("Parameter `transformationSearch.transformationIDs` is required when calling `searchTransformations`.");const t="/1/transformations/search",a={},n={},s={method:"POST",path:t,queryParameters:n,headers:a,data:e};return i.request(s,r)},triggerDockerSourceDiscover({sourceID:e},r){if(!e)throw new Error("Parameter `sourceID` is required when calling `triggerDockerSourceDiscover`.");const t="/1/sources/{sourceID}/discover".replace("{sourceID}",encodeURIComponent(e)),a={},n={},s={method:"POST",path:t,queryParameters:n,headers:a};return r={timeouts:{connect:18e4,read:18e4,write:18e4,...r?.timeouts}},i.request(s,r)},tryTransformation(e,r){if(!e)throw new Error("Parameter `transformationTry` is required when calling `tryTransformation`.");if(!e.code)throw new Error("Parameter `transformationTry.code` is required when calling `tryTransformation`.");if(!e.sampleRecord)throw new Error("Parameter `transformationTry.sampleRecord` is required when calling `tryTransformation`.");const t="/1/transformations/try",a={},n={},s={method:"POST",path:t,queryParameters:n,headers:a,data:e};return i.request(s,r)},tryTransformationBeforeUpdate({transformationID:e,transformationTry:r},t){if(!e)throw new Error("Parameter `transformationID` is required when calling `tryTransformationBeforeUpdate`.");if(!r)throw new Error("Parameter `transformationTry` is required when calling `tryTransformationBeforeUpdate`.");if(!r.code)throw new Error("Parameter `transformationTry.code` is required when calling `tryTransformationBeforeUpdate`.");if(!r.sampleRecord)throw new Error("Parameter `transformationTry.sampleRecord` is required when calling `tryTransformationBeforeUpdate`.");const a="/1/transformations/{transformationID}/try".replace("{transformationID}",encodeURIComponent(e)),n={},s={},o={method:"POST",path:a,queryParameters:s,headers:n,data:r};return i.request(o,t)},updateAuthentication({authenticationID:e,authenticationUpdate:r},t){if(!e)throw new Error("Parameter `authenticationID` is required when calling `updateAuthentication`.");if(!r)throw new Error("Parameter `authenticationUpdate` is required when calling `updateAuthentication`.");const a="/1/authentications/{authenticationID}".replace("{authenticationID}",encodeURIComponent(e)),n={},s={},o={method:"PATCH",path:a,queryParameters:s,headers:n,data:r};return i.request(o,t)},updateDestination({destinationID:e,destinationUpdate:r},t){if(!e)throw new Error("Parameter `destinationID` is required when calling `updateDestination`.");if(!r)throw new Error("Parameter `destinationUpdate` is required when calling `updateDestination`.");const a="/1/destinations/{destinationID}".replace("{destinationID}",encodeURIComponent(e)),n={},s={},o={method:"PATCH",path:a,queryParameters:s,headers:n,data:r};return i.request(o,t)},updateSource({sourceID:e,sourceUpdate:r},t){if(!e)throw new Error("Parameter `sourceID` is required when calling `updateSource`.");if(!r)throw new Error("Parameter `sourceUpdate` is required when calling `updateSource`.");const a="/1/sources/{sourceID}".replace("{sourceID}",encodeURIComponent(e)),n={},s={},o={method:"PATCH",path:a,queryParameters:s,headers:n,data:r};return i.request(o,t)},updateTask({taskID:e,taskUpdate:r},t){if(!e)throw new Error("Parameter `taskID` is required when calling `updateTask`.");if(!r)throw new Error("Parameter `taskUpdate` is required when calling `updateTask`.");const a="/2/tasks/{taskID}".replace("{taskID}",encodeURIComponent(e)),n={},s={},o={method:"PATCH",path:a,queryParameters:s,headers:n,data:r};return i.request(o,t)},updateTaskV1({taskID:e,taskUpdate:r},t){if(!e)throw new Error("Parameter `taskID` is required when calling `updateTaskV1`.");if(!r)throw new Error("Parameter `taskUpdate` is required when calling `updateTaskV1`.");const a="/1/tasks/{taskID}".replace("{taskID}",encodeURIComponent(e)),n={},s={},o={method:"PATCH",path:a,queryParameters:s,headers:n,data:r};return i.request(o,t)},updateTransformation({transformationID:e,transformationCreate:r},t){if(!e)throw new Error("Parameter `transformationID` is required when calling `updateTransformation`.");if(!r)throw new Error("Parameter `transformationCreate` is required when calling `updateTransformation`.");if(!r.code)throw new Error("Parameter `transformationCreate.code` is required when calling `updateTransformation`.");if(!r.name)throw new Error("Parameter `transformationCreate.name` is required when calling `updateTransformation`.");const a="/1/transformations/{transformationID}".replace("{transformationID}",encodeURIComponent(e)),n={},s={},o={method:"PUT",path:a,queryParameters:s,headers:n,data:r};return i.request(o,t)},validateSource(e,r=void 0){const t="/1/sources/validate",a={},n={},s={method:"POST",path:t,queryParameters:n,headers:a,data:e||{}};return r={timeouts:{connect:18e4,read:18e4,write:18e4,...r?.timeouts}},i.request(s,r)},validateSourceBeforeUpdate({sourceID:e,sourceUpdate:r},t){if(!e)throw new Error("Parameter `sourceID` is required when calling `validateSourceBeforeUpdate`.");if(!r)throw new Error("Parameter `sourceUpdate` is required when calling `validateSourceBeforeUpdate`.");const a="/1/sources/{sourceID}/validate".replace("{sourceID}",encodeURIComponent(e)),n={},s={},o={method:"POST",path:a,queryParameters:s,headers:n,data:r};return t={timeouts:{connect:18e4,read:18e4,write:18e4,...t?.timeouts}},i.request(o,t)}}}function ke(e,r,t,a){if(!e||"string"!==typeof e)throw new Error("`appId` is missing.");if(!r||"string"!==typeof r)throw new Error("`apiKey` is missing.");if(!t||t&&("string"!==typeof t||!Te.includes(t)))throw new Error(`\`region\` is required and must be one of the following: ${Te.join(", ")}`);return be({appId:e,apiKey:r,region:t,timeouts:{connect:25e3,read:25e3,write:25e3},logger:S(),requester:l(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:f(),requestsCache:f({serializable:!1}),hostsCache:y({caches:[P({key:`${Ie}-${e}`}),f()]}),...a})}var Ce="1.20.0";function Re(){return[{url:"status.algolia.com",accept:"readWrite",protocol:"https"}]}function Ne({appId:e,apiKey:r,authMode:t,algoliaAgents:a,...n}){const s=I(e,r,t),o=W({hosts:Re(),...n,algoliaAgent:D({algoliaAgents:a,client:"Monitoring",version:Ce}),baseHeaders:{"content-type":"text/plain",...s.headers(),...n.baseHeaders},baseQueryParameters:{...s.queryParameters(),...n.baseQueryParameters}});return{transporter:o,appId:e,apiKey:r,clearCache(){return Promise.all([o.requestsCache.clear(),o.responsesCache.clear()]).then((()=>{}))},get _ua(){return o.algoliaAgent.value},addAlgoliaAgent(e,r){o.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){t&&"WithinHeaders"!==t?o.baseQueryParameters["x-algolia-api-key"]=e:o.baseHeaders["x-algolia-api-key"]=e},customDelete({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customDelete`.");const a="/{path}".replace("{path}",e),n={},s=r||{},i={method:"DELETE",path:a,queryParameters:s,headers:n};return o.request(i,t)},customGet({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customGet`.");const a="/{path}".replace("{path}",e),n={},s=r||{},i={method:"GET",path:a,queryParameters:s,headers:n};return o.request(i,t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPost`.");const n="/{path}".replace("{path}",e),s={},i=r||{},c={method:"POST",path:n,queryParameters:i,headers:s,data:t||{}};return o.request(c,a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPut`.");const n="/{path}".replace("{path}",e),s={},i=r||{},c={method:"PUT",path:n,queryParameters:i,headers:s,data:t||{}};return o.request(c,a)},getClusterIncidents({clusters:e},r){if(!e)throw new Error("Parameter `clusters` is required when calling `getClusterIncidents`.");const t="/1/incidents/{clusters}".replace("{clusters}",encodeURIComponent(e)),a={},n={},s={method:"GET",path:t,queryParameters:n,headers:a};return o.request(s,r)},getClusterStatus({clusters:e},r){if(!e)throw new Error("Parameter `clusters` is required when calling `getClusterStatus`.");const t="/1/status/{clusters}".replace("{clusters}",encodeURIComponent(e)),a={},n={},s={method:"GET",path:t,queryParameters:n,headers:a};return o.request(s,r)},getIncidents(e){const r="/1/incidents",t={},a={},n={method:"GET",path:r,queryParameters:a,headers:t};return o.request(n,e)},getIndexingTime({clusters:e},r){if(!e)throw new Error("Parameter `clusters` is required when calling `getIndexingTime`.");const t="/1/indexing/{clusters}".replace("{clusters}",encodeURIComponent(e)),a={},n={},s={method:"GET",path:t,queryParameters:n,headers:a};return o.request(s,r)},getLatency({clusters:e},r){if(!e)throw new Error("Parameter `clusters` is required when calling `getLatency`.");const t="/1/latency/{clusters}".replace("{clusters}",encodeURIComponent(e)),a={},n={},s={method:"GET",path:t,queryParameters:n,headers:a};return o.request(s,r)},getMetrics({metric:e,period:r},t){if(!e)throw new Error("Parameter `metric` is required when calling `getMetrics`.");if(!r)throw new Error("Parameter `period` is required when calling `getMetrics`.");const a="/1/infrastructure/{metric}/period/{period}".replace("{metric}",encodeURIComponent(e)).replace("{period}",encodeURIComponent(r)),n={},s={},i={method:"GET",path:a,queryParameters:s,headers:n};return o.request(i,t)},getReachability({clusters:e},r){if(!e)throw new Error("Parameter `clusters` is required when calling `getReachability`.");const t="/1/reachability/{clusters}/probes".replace("{clusters}",encodeURIComponent(e)),a={},n={},s={method:"GET",path:t,queryParameters:n,headers:a};return o.request(s,r)},getServers(e){const r="/1/inventory/servers",t={},a={},n={method:"GET",path:r,queryParameters:a,headers:t};return o.request(n,e)},getStatus(e){const r="/1/status",t={},a={},n={method:"GET",path:r,queryParameters:a,headers:t};return o.request(n,e)}}}function Ae(e,r,t){if(!e||"string"!==typeof e)throw new Error("`appId` is missing.");if(!r||"string"!==typeof r)throw new Error("`apiKey` is missing.");return Ne({appId:e,apiKey:r,timeouts:{connect:1e3,read:2e3,write:3e4},logger:S(),requester:l(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:f(),requestsCache:f({serializable:!1}),hostsCache:y({caches:[P({key:`${Ce}-${e}`}),f()]}),...t})}var Ue="5.20.0";function Oe(e){return[{url:`${e}-dsn.algolia.net`,accept:"read",protocol:"https"},{url:`${e}.algolia.net`,accept:"write",protocol:"https"}].concat(U([{url:`${e}-1.algolianet.com`,accept:"readWrite",protocol:"https"},{url:`${e}-2.algolianet.com`,accept:"readWrite",protocol:"https"},{url:`${e}-3.algolianet.com`,accept:"readWrite",protocol:"https"}]))}function je({appId:e,apiKey:r,authMode:t,algoliaAgents:a,...n}){const s=I(e,r,t),o=W({hosts:Oe(e),...n,algoliaAgent:D({algoliaAgents:a,client:"Recommend",version:Ue}),baseHeaders:{"content-type":"text/plain",...s.headers(),...n.baseHeaders},baseQueryParameters:{...s.queryParameters(),...n.baseQueryParameters}});return{transporter:o,appId:e,apiKey:r,clearCache(){return Promise.all([o.requestsCache.clear(),o.responsesCache.clear()]).then((()=>{}))},get _ua(){return o.algoliaAgent.value},addAlgoliaAgent(e,r){o.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){t&&"WithinHeaders"!==t?o.baseQueryParameters["x-algolia-api-key"]=e:o.baseHeaders["x-algolia-api-key"]=e},batchRecommendRules({indexName:e,model:r,recommendRule:t},a){if(!e)throw new Error("Parameter `indexName` is required when calling `batchRecommendRules`.");if(!r)throw new Error("Parameter `model` is required when calling `batchRecommendRules`.");const n="/1/indexes/{indexName}/{model}/recommend/rules/batch".replace("{indexName}",encodeURIComponent(e)).replace("{model}",encodeURIComponent(r)),s={},i={},c={method:"POST",path:n,queryParameters:i,headers:s,data:t||{}};return o.request(c,a)},customDelete({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customDelete`.");const a="/{path}".replace("{path}",e),n={},s=r||{},i={method:"DELETE",path:a,queryParameters:s,headers:n};return o.request(i,t)},customGet({path:e,parameters:r},t){if(!e)throw new Error("Parameter `path` is required when calling `customGet`.");const a="/{path}".replace("{path}",e),n={},s=r||{},i={method:"GET",path:a,queryParameters:s,headers:n};return o.request(i,t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPost`.");const n="/{path}".replace("{path}",e),s={},i=r||{},c={method:"POST",path:n,queryParameters:i,headers:s,data:t||{}};return o.request(c,a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw new Error("Parameter `path` is required when calling `customPut`.");const n="/{path}".replace("{path}",e),s={},i=r||{},c={method:"PUT",path:n,queryParameters:i,headers:s,data:t||{}};return o.request(c,a)},deleteRecommendRule({indexName:e,model:r,objectID:t},a){if(!e)throw new Error("Parameter `indexName` is required when calling `deleteRecommendRule`.");if(!r)throw new Error("Parameter `model` is required when calling `deleteRecommendRule`.");if(!t)throw new Error("Parameter `objectID` is required when calling `deleteRecommendRule`.");const n="/1/indexes/{indexName}/{model}/recommend/rules/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{model}",encodeURIComponent(r)).replace("{objectID}",encodeURIComponent(t)),s={},i={},c={method:"DELETE",path:n,queryParameters:i,headers:s};return o.request(c,a)},getRecommendRule({indexName:e,model:r,objectID:t},a){if(!e)throw new Error("Parameter `indexName` is required when calling `getRecommendRule`.");if(!r)throw new Error("Parameter `model` is required when calling `getRecommendRule`.");if(!t)throw new Error("Parameter `objectID` is required when calling `getRecommendRule`.");const n="/1/indexes/{indexName}/{model}/recommend/rules/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{model}",encodeURIComponent(r)).replace("{objectID}",encodeURIComponent(t)),s={},i={},c={method:"GET",path:n,queryParameters:i,headers:s};return o.request(c,a)},getRecommendStatus({indexName:e,model:r,taskID:t},a){if(!e)throw new Error("Parameter `indexName` is required when calling `getRecommendStatus`.");if(!r)throw new Error("Parameter `model` is required when calling `getRecommendStatus`.");if(!t)throw new Error("Parameter `taskID` is required when calling `getRecommendStatus`.");const n="/1/indexes/{indexName}/{model}/task/{taskID}".replace("{indexName}",encodeURIComponent(e)).replace("{model}",encodeURIComponent(r)).replace("{taskID}",encodeURIComponent(t)),s={},i={},c={method:"GET",path:n,queryParameters:i,headers:s};return o.request(c,a)},getRecommendations(e,r){if(e&&Array.isArray(e)){const r={requests:e};e=r}if(!e)throw new Error("Parameter `getRecommendationsParams` is required when calling `getRecommendations`.");if(!e.requests)throw new Error("Parameter `getRecommendationsParams.requests` is required when calling `getRecommendations`.");const t="/1/indexes/*/recommendations",a={},n={},s={method:"POST",path:t,queryParameters:n,headers:a,data:e,useReadTransporter:!0,cacheable:!0};return o.request(s,r)},searchRecommendRules({indexName:e,model:r,searchRecommendRulesParams:t},a){if(!e)throw new Error("Parameter `indexName` is required when calling `searchRecommendRules`.");if(!r)throw new Error("Parameter `model` is required when calling `searchRecommendRules`.");const n="/1/indexes/{indexName}/{model}/recommend/rules/search".replace("{indexName}",encodeURIComponent(e)).replace("{model}",encodeURIComponent(r)),s={},i={},c={method:"POST",path:n,queryParameters:i,headers:s,data:t||{},useReadTransporter:!0,cacheable:!0};return o.request(c,a)}}}function Ge(e,r,t){if(!e||"string"!==typeof e)throw new Error("`appId` is missing.");if(!r||"string"!==typeof r)throw new Error("`apiKey` is missing.");return je({appId:e,apiKey:r,timeouts:{connect:1e3,read:2e3,write:3e4},logger:S(),requester:l(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:f(),requestsCache:f({serializable:!1}),hostsCache:y({caches:[P({key:`${Ue}-${e}`}),f()]}),...t})}var Ke=Object.defineProperty,Be=Object.getOwnPropertyDescriptor,He=Object.getOwnPropertyNames,$e=Object.prototype.hasOwnProperty,Qe=(e,r)=>{for(var t in r)Ke(e,t,{get:r[t],enumerable:!0})},ze=(e,r,t,a)=>{if(r&&"object"===typeof r||"function"===typeof r)for(let n of He(r))$e.call(e,n)||n===t||Ke(e,n,{get:()=>r[n],enumerable:!(a=Be(r,n))||a.enumerable});return e},Fe=(e,r,t)=>(ze(e,r,"default"),t&&ze(t,r,"default")),Le={};Qe(Le,{algoliasearch:()=>Ve,apiClientVersion:()=>qe});var We={};function Ve(e,r,t){if(!e||"string"!==typeof e)throw new Error("`appId` is missing.");if(!r||"string"!==typeof r)throw new Error("`apiKey` is missing.");const a=Ee(e,r,t);return{...a,get _ua(){return a.transporter.algoliaAgent.value},initAbtesting:t=>X(t.appId||e,t.apiKey||r,t.region,t.options),initAnalytics:t=>te(t.appId||e,t.apiKey||r,t.region,t.options),initIngestion:t=>ke(t.appId||e,t.apiKey||r,t.region,t.options),initInsights:t=>ie(t.appId||e,t.apiKey||r,t.region,t.options),initMonitoring:(t={})=>Ae(t.appId||e,t.apiKey||r,t.options),initPersonalization:t=>le(t.appId||e,t.apiKey||r,t.region,t.options),initQuerySuggestions:t=>Pe(t.appId||e,t.apiKey||r,t.region,t.options),initRecommend:(t={})=>Ge(t.appId||e,t.apiKey||r,t.options)}}Qe(We,{apiClientVersion:()=>qe}),Fe(We,a),Fe(We,n),Fe(We,s),Fe(We,o),Fe(We,i),Fe(We,c),Fe(We,d),Fe(We,u),Fe(We,h),Fe(Le,We)}}]);
//# sourceMappingURL=928.4f3cbb35.js.map